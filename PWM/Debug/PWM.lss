
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006c0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800082  00800082  00000776  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e5  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00002978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b1  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e0  00000000  00000000  000032e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d0  00000000  00000000  000034c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  0000399c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000222  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000396  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  8a:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
}

//This interrupt takes an input from a button and increases the duty
//cycle.
//Params: in
ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if(OCR1A <= (ICR1 - 1))
  a4:	2a b5       	in	r18, 0x2a	; 42
  a6:	3b b5       	in	r19, 0x2b	; 43
  a8:	86 b5       	in	r24, 0x26	; 38
  aa:	97 b5       	in	r25, 0x27	; 39
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	82 17       	cp	r24, r18
  b0:	93 07       	cpc	r25, r19
  b2:	28 f0       	brcs	.+10     	; 0xbe <__vector_1+0x2c>

		OCR1A += 0x01;
  b4:	8a b5       	in	r24, 0x2a	; 42
  b6:	9b b5       	in	r25, 0x2b	; 43
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	9b bd       	out	0x2b, r25	; 43
  bc:	8a bd       	out	0x2a, r24	; 42

}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	3f 91       	pop	r19
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

//This interrupt takes an input from a button and decreases the duty
//cycle.
//Params: in
ISR(INT1_vect){  
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	if(OCR1A > 0x01)
  de:	8a b5       	in	r24, 0x2a	; 42
  e0:	9b b5       	in	r25, 0x2b	; 43
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	91 05       	cpc	r25, r1
  e6:	28 f0       	brcs	.+10     	; 0xf2 <__vector_2+0x22>

		OCR1A -= 0x01;
  e8:	8a b5       	in	r24, 0x2a	; 42
  ea:	9b b5       	in	r25, 0x2b	; 43
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	9b bd       	out	0x2b, r25	; 43
  f0:	8a bd       	out	0x2a, r24	; 42

}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_16>:

//This interrupt reads the ADC port and converts it to a usable value.
//Params: in
ISR(ADC_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	//Assign the variable theLowADC as the value in the register ADCL
	theLowADC = ADCL; 
 110:	84 b1       	in	r24, 0x04	; 4
 112:	80 93 88 00 	sts	0x0088, r24
	//Assign theTenBitResults as the value in ADCH shifted 8 left. 
	theTenBitResults = ADCH<<8;  
 116:	25 b1       	in	r18, 0x05	; 5
 118:	92 2f       	mov	r25, r18
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 93 87 00 	sts	0x0087, r25
 120:	80 93 86 00 	sts	0x0086, r24
	//Start ADC conversion
	ADCSRA |=1<<ADSC;  
 124:	36 9a       	sbi	0x06, 6	; 6
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_Z10LCDCommandh>:

//This function sends a Register command to the LCD Display.
//Params: in
void LCDCommand(unsigned char command)
{
	PORTB = command;
 136:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~0x03;
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	8c 7f       	andi	r24, 0xFC	; 252
 13c:	82 bb       	out	0x12, r24	; 18
	PORTD |= 0x80;
 13e:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f ec       	ldi	r24, 0xCF	; 207
 142:	97 e0       	ldi	r25, 0x07	; 7
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <_Z10LCDCommandh+0xe>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_Z10LCDCommandh+0x14>
 14a:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~0x80;
 14c:	97 98       	cbi	0x12, 7	; 18
 14e:	8f ec       	ldi	r24, 0xCF	; 207
 150:	97 e0       	ldi	r25, 0x07	; 7
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_Z10LCDCommandh+0x1c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_Z10LCDCommandh+0x22>
 158:	00 00       	nop
	_delay_ms(1);
}
 15a:	08 95       	ret

0000015c <_Z7LCDDatah>:

//This function sends a character to the display.
//Params: in
void LCDData(unsigned char data)
{
	PORTB = data;
 15c:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~0x02;
 15e:	91 98       	cbi	0x12, 1	; 18
	PORTD |= 0x81;	
 160:	82 b3       	in	r24, 0x12	; 18
 162:	81 68       	ori	r24, 0x81	; 129
 164:	82 bb       	out	0x12, r24	; 18
 166:	8f ec       	ldi	r24, 0xCF	; 207
 168:	97 e0       	ldi	r25, 0x07	; 7
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z7LCDDatah+0xe>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_Z7LCDDatah+0x14>
 170:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~0x81;
 172:	82 b3       	in	r24, 0x12	; 18
 174:	8e 77       	andi	r24, 0x7E	; 126
 176:	82 bb       	out	0x12, r24	; 18
}
 178:	08 95       	ret

0000017a <_Z7LCDCharch>:

//This function sends a Character to the specified cursor position on 
//the LCD Display.
//Params: in, in
void LCDChar(char text, unsigned char cursorPosition)
{
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	86 2f       	mov	r24, r22
	LCDCommand(cursorPosition);
 180:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
 184:	8f ec       	ldi	r24, 0xCF	; 207
 186:	97 e0       	ldi	r25, 0x07	; 7
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <_Z7LCDCharch+0xe>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_Z7LCDCharch+0x14>
 18e:	00 00       	nop
	_delay_ms(1);
	LCDData(text);
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z7LCDDatah>
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <_Z7LCDInitv>:
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z7LCDInitv+0x4>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z7LCDInitv+0xa>
 1a4:	00 00       	nop
//Params: none
void LCDInit()
{
	_delay_ms(32);
	//Function Set
	LCDCommand(0x3C);
 1a6:	8c e3       	ldi	r24, 0x3C	; 60
 1a8:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
	//Display On
	LCDCommand(0x0F);
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
	//Clear Display
	LCDCommand(0x01);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z7LCDInitv+0x22>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_Z7LCDInitv+0x28>
 1c2:	00 00       	nop
	_delay_ms(1);
	//Set Entry Mode
	LCDCommand(0x06);
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
}
 1ca:	08 95       	ret

000001cc <_Z9LCDStringPch>:

//This function sends a string value to the specified cursor position on 
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	86 2f       	mov	r24, r22
	LCDCommand(cursorPosition);
 1d4:	0e 94 9b 00 	call	0x136	; 0x136 <_Z10LCDCommandh>
	while(*text)
 1d8:	88 81       	ld	r24, Y
 1da:	88 23       	and	r24, r24
 1dc:	31 f0       	breq	.+12     	; 0x1ea <_Z9LCDStringPch+0x1e>
}

//This function sends a string value to the specified cursor position on 
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
 1de:	21 96       	adiw	r28, 0x01	; 1
{
	LCDCommand(cursorPosition);
	while(*text)
	{
		LCDData(*text);
 1e0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z7LCDDatah>
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
{
	LCDCommand(cursorPosition);
	while(*text)
 1e4:	89 91       	ld	r24, Y+
 1e6:	88 23       	and	r24, r24
 1e8:	d9 f7       	brne	.-10     	; 0x1e0 <_Z9LCDStringPch+0x14>
	{
		LCDData(*text);
		text++;
	}
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{

	//Disable Interrupts
	cli();
 1f0:	f8 94       	cli
	DDRD = 0xA3;
 1f2:	83 ea       	ldi	r24, 0xA3	; 163
 1f4:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	87 bb       	out	0x17, r24	; 23
	//Set counter options
	TCCR1A = 0xA2;
 1fa:	82 ea       	ldi	r24, 0xA2	; 162
 1fc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;
 1fe:	89 e1       	ldi	r24, 0x19	; 25
 200:	8e bd       	out	0x2e, r24	; 46
	//Set TOP = ICR1 for 24.5kHz
	ICR1 = 0x14D;
 202:	8d e4       	ldi	r24, 0x4D	; 77
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	97 bd       	out	0x27, r25	; 39
 208:	86 bd       	out	0x26, r24	; 38
	//Arbitrarily Set OCR1A (Duty Cycle)
	OCR1A = 0x05;
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9b bd       	out	0x2b, r25	; 43
 210:	8a bd       	out	0x2a, r24	; 42
	//Enable INT0 and INT1
	GICR |= 1<<INT0 | 1<<INT1;
 212:	8b b7       	in	r24, 0x3b	; 59
 214:	80 6c       	ori	r24, 0xC0	; 192
 216:	8b bf       	out	0x3b, r24	; 59
	//Set Falling Edge Trigger for Interrupts
	MCUCR |= 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
 218:	85 b7       	in	r24, 0x35	; 53
 21a:	8f 60       	ori	r24, 0x0F	; 15
 21c:	85 bf       	out	0x35, r24	; 53
	//Set ADC prescaler to division of 16, so at a clk f of 8Mhz,
	//ADC speed is 500kHz. See table 85 in datasheet for prescaler 
	//selection options.
	ADCSRA |= 1<<ADPS2; 
 21e:	32 9a       	sbi	0x06, 2	; 6
	//Set voltage reference as AVCC, should be 5 V?  See Page 208
	ADMUX |= 1<<REFS0;
 220:	3e 9a       	sbi	0x07, 6	; 7
	//Enable ADC interrupt
	ADCSRA |= 1<<ADIE;
 222:	33 9a       	sbi	0x06, 3	; 6
	//Enable the ADC
	ADCSRA |= 1<<ADEN;
 224:	37 9a       	sbi	0x06, 7	; 6
	//Re-enable Interrupts
	sei();
 226:	78 94       	sei
	
	LCDInit();
 228:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z7LCDInitv>
	LCDString("  ADC Voltage:  ",0x80);
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	60 e8       	ldi	r22, 0x80	; 128
 232:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z9LCDStringPch>
	LCDString("     00.00V     ",0xC0);
 236:	81 e7       	ldi	r24, 0x71	; 113
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	60 ec       	ldi	r22, 0xC0	; 192
 23c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z9LCDStringPch>
 240:	ff cf       	rjmp	.-2      	; 0x240 <main+0x50>

00000242 <_Z10LCDVoltagefh>:

//This function converts a float Voltage to characters and sends them to 
//the specified cursor position on the LCD Display.
//Params: in, in
void LCDVoltage(float number, unsigned char cursorStartPos)
{
 242:	9f 92       	push	r9
 244:	af 92       	push	r10
 246:	bf 92       	push	r11
 248:	cf 92       	push	r12
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	6b 01       	movw	r12, r22
 25a:	7c 01       	movw	r14, r24
 25c:	b4 2e       	mov	r11, r20
	char tens = ((int)number - ((int)number % 10))/10;
 25e:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
 262:	dc 01       	movw	r26, r24
 264:	cb 01       	movw	r24, r22
 266:	ec 01       	movw	r28, r24
 268:	2a e0       	ldi	r18, 0x0A	; 10
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 272:	ae 01       	movw	r20, r28
 274:	48 1b       	sub	r20, r24
 276:	59 0b       	sbc	r21, r25
 278:	ca 01       	movw	r24, r20
 27a:	b9 01       	movw	r22, r18
 27c:	0e 94 37 03 	call	0x66e	; 0x66e <__divmodhi4>
 280:	a6 2e       	mov	r10, r22
	char ones = (int)(number - tens);
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 48 02 	call	0x490	; 0x490 <__floatsisf>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	0e 94 b0 01 	call	0x360	; 0x360 <__subsf3>
 298:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
 29c:	96 2e       	mov	r9, r22
	char tenth = (int)((number - (int)number)*10);
 29e:	be 01       	movw	r22, r28
 2a0:	88 27       	eor	r24, r24
 2a2:	77 fd       	sbrc	r23, 7
 2a4:	80 95       	com	r24
 2a6:	98 2f       	mov	r25, r24
 2a8:	0e 94 48 02 	call	0x490	; 0x490 <__floatsisf>
 2ac:	9b 01       	movw	r18, r22
 2ae:	ac 01       	movw	r20, r24
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	0e 94 b0 01 	call	0x360	; 0x360 <__subsf3>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e2       	ldi	r20, 0x20	; 32
 2be:	51 e4       	ldi	r21, 0x41	; 65
 2c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__mulsf3>
 2c4:	d6 2f       	mov	r29, r22
 2c6:	c7 2f       	mov	r28, r23
 2c8:	18 2f       	mov	r17, r24
 2ca:	09 2f       	mov	r16, r25
 2cc:	86 2f       	mov	r24, r22
 2ce:	9c 2f       	mov	r25, r28
 2d0:	a1 2f       	mov	r26, r17
 2d2:	b0 2f       	mov	r27, r16
 2d4:	bc 01       	movw	r22, r24
 2d6:	cd 01       	movw	r24, r26
 2d8:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
 2dc:	f6 2e       	mov	r15, r22
	char hundredth = (int)((((number - (int)number)*10)-tenth)*10 + 0.5);
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 48 02 	call	0x490	; 0x490 <__floatsisf>
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	8d 2f       	mov	r24, r29
 2ee:	9c 2f       	mov	r25, r28
 2f0:	a1 2f       	mov	r26, r17
 2f2:	b0 2f       	mov	r27, r16
 2f4:	bc 01       	movw	r22, r24
 2f6:	cd 01       	movw	r24, r26
 2f8:	0e 94 b0 01 	call	0x360	; 0x360 <__subsf3>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e2       	ldi	r20, 0x20	; 32
 302:	51 e4       	ldi	r21, 0x41	; 65
 304:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__mulsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	5f e3       	ldi	r21, 0x3F	; 63
 310:	0e 94 b1 01 	call	0x362	; 0x362 <__addsf3>
 314:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
 318:	c6 2f       	mov	r28, r22
	tens += charOffset;
	ones += charOffset;
	tenth += charOffset;
	hundredth += charOffset;
	
	LCDChar(tens,cursorStartPos);
 31a:	8a 2d       	mov	r24, r10
 31c:	80 5d       	subi	r24, 0xD0	; 208
 31e:	6b 2d       	mov	r22, r11
 320:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z7LCDCharch>
	LCDChar(ones,cursorStartPos + 1);
 324:	6b 2d       	mov	r22, r11
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	89 2d       	mov	r24, r9
 32a:	80 5d       	subi	r24, 0xD0	; 208
 32c:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z7LCDCharch>
	LCDChar(tenth,cursorStartPos + 3);
 330:	6b 2d       	mov	r22, r11
 332:	6d 5f       	subi	r22, 0xFD	; 253
 334:	8f 2d       	mov	r24, r15
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z7LCDCharch>
	LCDChar(hundredth,cursorStartPos + 4);
 33c:	6b 2d       	mov	r22, r11
 33e:	6c 5f       	subi	r22, 0xFC	; 252
 340:	8c 2f       	mov	r24, r28
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z7LCDCharch>
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	08 95       	ret

00000360 <__subsf3>:
 360:	50 58       	subi	r21, 0x80	; 128

00000362 <__addsf3>:
 362:	bb 27       	eor	r27, r27
 364:	aa 27       	eor	r26, r26
 366:	0e d0       	rcall	.+28     	; 0x384 <__addsf3x>
 368:	e5 c0       	rjmp	.+458    	; 0x534 <__fp_round>
 36a:	d6 d0       	rcall	.+428    	; 0x518 <__fp_pscA>
 36c:	30 f0       	brcs	.+12     	; 0x37a <__addsf3+0x18>
 36e:	db d0       	rcall	.+438    	; 0x526 <__fp_pscB>
 370:	20 f0       	brcs	.+8      	; 0x37a <__addsf3+0x18>
 372:	31 f4       	brne	.+12     	; 0x380 <__addsf3+0x1e>
 374:	9f 3f       	cpi	r25, 0xFF	; 255
 376:	11 f4       	brne	.+4      	; 0x37c <__addsf3+0x1a>
 378:	1e f4       	brtc	.+6      	; 0x380 <__addsf3+0x1e>
 37a:	cb c0       	rjmp	.+406    	; 0x512 <__fp_nan>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3+0x1e>
 37e:	e0 95       	com	r30
 380:	e7 fb       	bst	r30, 7
 382:	c1 c0       	rjmp	.+386    	; 0x506 <__fp_inf>

00000384 <__addsf3x>:
 384:	e9 2f       	mov	r30, r25
 386:	e7 d0       	rcall	.+462    	; 0x556 <__fp_split3>
 388:	80 f3       	brcs	.-32     	; 0x36a <__addsf3+0x8>
 38a:	ba 17       	cp	r27, r26
 38c:	62 07       	cpc	r22, r18
 38e:	73 07       	cpc	r23, r19
 390:	84 07       	cpc	r24, r20
 392:	95 07       	cpc	r25, r21
 394:	18 f0       	brcs	.+6      	; 0x39c <__addsf3x+0x18>
 396:	71 f4       	brne	.+28     	; 0x3b4 <__addsf3x+0x30>
 398:	9e f5       	brtc	.+102    	; 0x400 <__addsf3x+0x7c>
 39a:	ff c0       	rjmp	.+510    	; 0x59a <__fp_zero>
 39c:	0e f4       	brtc	.+2      	; 0x3a0 <__addsf3x+0x1c>
 39e:	e0 95       	com	r30
 3a0:	0b 2e       	mov	r0, r27
 3a2:	ba 2f       	mov	r27, r26
 3a4:	a0 2d       	mov	r26, r0
 3a6:	0b 01       	movw	r0, r22
 3a8:	b9 01       	movw	r22, r18
 3aa:	90 01       	movw	r18, r0
 3ac:	0c 01       	movw	r0, r24
 3ae:	ca 01       	movw	r24, r20
 3b0:	a0 01       	movw	r20, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	ff 27       	eor	r31, r31
 3b6:	59 1b       	sub	r21, r25
 3b8:	99 f0       	breq	.+38     	; 0x3e0 <__addsf3x+0x5c>
 3ba:	59 3f       	cpi	r21, 0xF9	; 249
 3bc:	50 f4       	brcc	.+20     	; 0x3d2 <__addsf3x+0x4e>
 3be:	50 3e       	cpi	r21, 0xE0	; 224
 3c0:	68 f1       	brcs	.+90     	; 0x41c <__addsf3x+0x98>
 3c2:	1a 16       	cp	r1, r26
 3c4:	f0 40       	sbci	r31, 0x00	; 0
 3c6:	a2 2f       	mov	r26, r18
 3c8:	23 2f       	mov	r18, r19
 3ca:	34 2f       	mov	r19, r20
 3cc:	44 27       	eor	r20, r20
 3ce:	58 5f       	subi	r21, 0xF8	; 248
 3d0:	f3 cf       	rjmp	.-26     	; 0x3b8 <__addsf3x+0x34>
 3d2:	46 95       	lsr	r20
 3d4:	37 95       	ror	r19
 3d6:	27 95       	ror	r18
 3d8:	a7 95       	ror	r26
 3da:	f0 40       	sbci	r31, 0x00	; 0
 3dc:	53 95       	inc	r21
 3de:	c9 f7       	brne	.-14     	; 0x3d2 <__addsf3x+0x4e>
 3e0:	7e f4       	brtc	.+30     	; 0x400 <__addsf3x+0x7c>
 3e2:	1f 16       	cp	r1, r31
 3e4:	ba 0b       	sbc	r27, r26
 3e6:	62 0b       	sbc	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	ba f0       	brmi	.+46     	; 0x41c <__addsf3x+0x98>
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	a1 f0       	breq	.+40     	; 0x41a <__addsf3x+0x96>
 3f2:	ff 0f       	add	r31, r31
 3f4:	bb 1f       	adc	r27, r27
 3f6:	66 1f       	adc	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	88 1f       	adc	r24, r24
 3fc:	c2 f7       	brpl	.-16     	; 0x3ee <__addsf3x+0x6a>
 3fe:	0e c0       	rjmp	.+28     	; 0x41c <__addsf3x+0x98>
 400:	ba 0f       	add	r27, r26
 402:	62 1f       	adc	r22, r18
 404:	73 1f       	adc	r23, r19
 406:	84 1f       	adc	r24, r20
 408:	48 f4       	brcc	.+18     	; 0x41c <__addsf3x+0x98>
 40a:	87 95       	ror	r24
 40c:	77 95       	ror	r23
 40e:	67 95       	ror	r22
 410:	b7 95       	ror	r27
 412:	f7 95       	ror	r31
 414:	9e 3f       	cpi	r25, 0xFE	; 254
 416:	08 f0       	brcs	.+2      	; 0x41a <__addsf3x+0x96>
 418:	b3 cf       	rjmp	.-154    	; 0x380 <__addsf3+0x1e>
 41a:	93 95       	inc	r25
 41c:	88 0f       	add	r24, r24
 41e:	08 f0       	brcs	.+2      	; 0x422 <__addsf3x+0x9e>
 420:	99 27       	eor	r25, r25
 422:	ee 0f       	add	r30, r30
 424:	97 95       	ror	r25
 426:	87 95       	ror	r24
 428:	08 95       	ret

0000042a <__fixsfsi>:
 42a:	04 d0       	rcall	.+8      	; 0x434 <__fixunssfsi>
 42c:	68 94       	set
 42e:	b1 11       	cpse	r27, r1
 430:	b5 c0       	rjmp	.+362    	; 0x59c <__fp_szero>
 432:	08 95       	ret

00000434 <__fixunssfsi>:
 434:	98 d0       	rcall	.+304    	; 0x566 <__fp_splitA>
 436:	88 f0       	brcs	.+34     	; 0x45a <__fixunssfsi+0x26>
 438:	9f 57       	subi	r25, 0x7F	; 127
 43a:	90 f0       	brcs	.+36     	; 0x460 <__fixunssfsi+0x2c>
 43c:	b9 2f       	mov	r27, r25
 43e:	99 27       	eor	r25, r25
 440:	b7 51       	subi	r27, 0x17	; 23
 442:	a0 f0       	brcs	.+40     	; 0x46c <__fixunssfsi+0x38>
 444:	d1 f0       	breq	.+52     	; 0x47a <__fixunssfsi+0x46>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	1a f0       	brmi	.+6      	; 0x456 <__fixunssfsi+0x22>
 450:	ba 95       	dec	r27
 452:	c9 f7       	brne	.-14     	; 0x446 <__fixunssfsi+0x12>
 454:	12 c0       	rjmp	.+36     	; 0x47a <__fixunssfsi+0x46>
 456:	b1 30       	cpi	r27, 0x01	; 1
 458:	81 f0       	breq	.+32     	; 0x47a <__fixunssfsi+0x46>
 45a:	9f d0       	rcall	.+318    	; 0x59a <__fp_zero>
 45c:	b1 e0       	ldi	r27, 0x01	; 1
 45e:	08 95       	ret
 460:	9c c0       	rjmp	.+312    	; 0x59a <__fp_zero>
 462:	67 2f       	mov	r22, r23
 464:	78 2f       	mov	r23, r24
 466:	88 27       	eor	r24, r24
 468:	b8 5f       	subi	r27, 0xF8	; 248
 46a:	39 f0       	breq	.+14     	; 0x47a <__fixunssfsi+0x46>
 46c:	b9 3f       	cpi	r27, 0xF9	; 249
 46e:	cc f3       	brlt	.-14     	; 0x462 <__fixunssfsi+0x2e>
 470:	86 95       	lsr	r24
 472:	77 95       	ror	r23
 474:	67 95       	ror	r22
 476:	b3 95       	inc	r27
 478:	d9 f7       	brne	.-10     	; 0x470 <__fixunssfsi+0x3c>
 47a:	3e f4       	brtc	.+14     	; 0x48a <__fixunssfsi+0x56>
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <__floatunsisf>:
 48c:	e8 94       	clt
 48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__floatsisf+0x12>

00000490 <__floatsisf>:
 490:	97 fb       	bst	r25, 7
 492:	3e f4       	brtc	.+14     	; 0x4a2 <__floatsisf+0x12>
 494:	90 95       	com	r25
 496:	80 95       	com	r24
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	8f 4f       	sbci	r24, 0xFF	; 255
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	99 23       	and	r25, r25
 4a4:	a9 f0       	breq	.+42     	; 0x4d0 <__floatsisf+0x40>
 4a6:	f9 2f       	mov	r31, r25
 4a8:	96 e9       	ldi	r25, 0x96	; 150
 4aa:	bb 27       	eor	r27, r27
 4ac:	93 95       	inc	r25
 4ae:	f6 95       	lsr	r31
 4b0:	87 95       	ror	r24
 4b2:	77 95       	ror	r23
 4b4:	67 95       	ror	r22
 4b6:	b7 95       	ror	r27
 4b8:	f1 11       	cpse	r31, r1
 4ba:	f8 cf       	rjmp	.-16     	; 0x4ac <__floatsisf+0x1c>
 4bc:	fa f4       	brpl	.+62     	; 0x4fc <__floatsisf+0x6c>
 4be:	bb 0f       	add	r27, r27
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__floatsisf+0x36>
 4c2:	60 ff       	sbrs	r22, 0
 4c4:	1b c0       	rjmp	.+54     	; 0x4fc <__floatsisf+0x6c>
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	16 c0       	rjmp	.+44     	; 0x4fc <__floatsisf+0x6c>
 4d0:	88 23       	and	r24, r24
 4d2:	11 f0       	breq	.+4      	; 0x4d8 <__floatsisf+0x48>
 4d4:	96 e9       	ldi	r25, 0x96	; 150
 4d6:	11 c0       	rjmp	.+34     	; 0x4fa <__floatsisf+0x6a>
 4d8:	77 23       	and	r23, r23
 4da:	21 f0       	breq	.+8      	; 0x4e4 <__floatsisf+0x54>
 4dc:	9e e8       	ldi	r25, 0x8E	; 142
 4de:	87 2f       	mov	r24, r23
 4e0:	76 2f       	mov	r23, r22
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__floatsisf+0x5e>
 4e4:	66 23       	and	r22, r22
 4e6:	71 f0       	breq	.+28     	; 0x504 <__floatsisf+0x74>
 4e8:	96 e8       	ldi	r25, 0x86	; 134
 4ea:	86 2f       	mov	r24, r22
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	2a f0       	brmi	.+10     	; 0x4fc <__floatsisf+0x6c>
 4f2:	9a 95       	dec	r25
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	da f7       	brpl	.-10     	; 0x4f2 <__floatsisf+0x62>
 4fc:	88 0f       	add	r24, r24
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <__fp_inf>:
 506:	97 f9       	bld	r25, 7
 508:	9f 67       	ori	r25, 0x7F	; 127
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	08 95       	ret

00000512 <__fp_nan>:
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	08 95       	ret

00000518 <__fp_pscA>:
 518:	00 24       	eor	r0, r0
 51a:	0a 94       	dec	r0
 51c:	16 16       	cp	r1, r22
 51e:	17 06       	cpc	r1, r23
 520:	18 06       	cpc	r1, r24
 522:	09 06       	cpc	r0, r25
 524:	08 95       	ret

00000526 <__fp_pscB>:
 526:	00 24       	eor	r0, r0
 528:	0a 94       	dec	r0
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	05 06       	cpc	r0, r21
 532:	08 95       	ret

00000534 <__fp_round>:
 534:	09 2e       	mov	r0, r25
 536:	03 94       	inc	r0
 538:	00 0c       	add	r0, r0
 53a:	11 f4       	brne	.+4      	; 0x540 <__fp_round+0xc>
 53c:	88 23       	and	r24, r24
 53e:	52 f0       	brmi	.+20     	; 0x554 <__fp_round+0x20>
 540:	bb 0f       	add	r27, r27
 542:	40 f4       	brcc	.+16     	; 0x554 <__fp_round+0x20>
 544:	bf 2b       	or	r27, r31
 546:	11 f4       	brne	.+4      	; 0x54c <__fp_round+0x18>
 548:	60 ff       	sbrs	r22, 0
 54a:	04 c0       	rjmp	.+8      	; 0x554 <__fp_round+0x20>
 54c:	6f 5f       	subi	r22, 0xFF	; 255
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	8f 4f       	sbci	r24, 0xFF	; 255
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__fp_split3>:
 556:	57 fd       	sbrc	r21, 7
 558:	90 58       	subi	r25, 0x80	; 128
 55a:	44 0f       	add	r20, r20
 55c:	55 1f       	adc	r21, r21
 55e:	59 f0       	breq	.+22     	; 0x576 <__fp_splitA+0x10>
 560:	5f 3f       	cpi	r21, 0xFF	; 255
 562:	71 f0       	breq	.+28     	; 0x580 <__fp_splitA+0x1a>
 564:	47 95       	ror	r20

00000566 <__fp_splitA>:
 566:	88 0f       	add	r24, r24
 568:	97 fb       	bst	r25, 7
 56a:	99 1f       	adc	r25, r25
 56c:	61 f0       	breq	.+24     	; 0x586 <__fp_splitA+0x20>
 56e:	9f 3f       	cpi	r25, 0xFF	; 255
 570:	79 f0       	breq	.+30     	; 0x590 <__fp_splitA+0x2a>
 572:	87 95       	ror	r24
 574:	08 95       	ret
 576:	12 16       	cp	r1, r18
 578:	13 06       	cpc	r1, r19
 57a:	14 06       	cpc	r1, r20
 57c:	55 1f       	adc	r21, r21
 57e:	f2 cf       	rjmp	.-28     	; 0x564 <__fp_split3+0xe>
 580:	46 95       	lsr	r20
 582:	f1 df       	rcall	.-30     	; 0x566 <__fp_splitA>
 584:	08 c0       	rjmp	.+16     	; 0x596 <__fp_splitA+0x30>
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	99 1f       	adc	r25, r25
 58e:	f1 cf       	rjmp	.-30     	; 0x572 <__fp_splitA+0xc>
 590:	86 95       	lsr	r24
 592:	71 05       	cpc	r23, r1
 594:	61 05       	cpc	r22, r1
 596:	08 94       	sec
 598:	08 95       	ret

0000059a <__fp_zero>:
 59a:	e8 94       	clt

0000059c <__fp_szero>:
 59c:	bb 27       	eor	r27, r27
 59e:	66 27       	eor	r22, r22
 5a0:	77 27       	eor	r23, r23
 5a2:	cb 01       	movw	r24, r22
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <__mulsf3>:
 5a8:	0b d0       	rcall	.+22     	; 0x5c0 <__mulsf3x>
 5aa:	c4 cf       	rjmp	.-120    	; 0x534 <__fp_round>
 5ac:	b5 df       	rcall	.-150    	; 0x518 <__fp_pscA>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <__mulsf3+0x12>
 5b0:	ba df       	rcall	.-140    	; 0x526 <__fp_pscB>
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <__mulsf3+0x12>
 5b4:	95 23       	and	r25, r21
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__mulsf3+0x12>
 5b8:	a6 cf       	rjmp	.-180    	; 0x506 <__fp_inf>
 5ba:	ab cf       	rjmp	.-170    	; 0x512 <__fp_nan>
 5bc:	11 24       	eor	r1, r1
 5be:	ee cf       	rjmp	.-36     	; 0x59c <__fp_szero>

000005c0 <__mulsf3x>:
 5c0:	ca df       	rcall	.-108    	; 0x556 <__fp_split3>
 5c2:	a0 f3       	brcs	.-24     	; 0x5ac <__mulsf3+0x4>

000005c4 <__mulsf3_pse>:
 5c4:	95 9f       	mul	r25, r21
 5c6:	d1 f3       	breq	.-12     	; 0x5bc <__mulsf3+0x14>
 5c8:	95 0f       	add	r25, r21
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	55 1f       	adc	r21, r21
 5ce:	62 9f       	mul	r22, r18
 5d0:	f0 01       	movw	r30, r0
 5d2:	72 9f       	mul	r23, r18
 5d4:	bb 27       	eor	r27, r27
 5d6:	f0 0d       	add	r31, r0
 5d8:	b1 1d       	adc	r27, r1
 5da:	63 9f       	mul	r22, r19
 5dc:	aa 27       	eor	r26, r26
 5de:	f0 0d       	add	r31, r0
 5e0:	b1 1d       	adc	r27, r1
 5e2:	aa 1f       	adc	r26, r26
 5e4:	64 9f       	mul	r22, r20
 5e6:	66 27       	eor	r22, r22
 5e8:	b0 0d       	add	r27, r0
 5ea:	a1 1d       	adc	r26, r1
 5ec:	66 1f       	adc	r22, r22
 5ee:	82 9f       	mul	r24, r18
 5f0:	22 27       	eor	r18, r18
 5f2:	b0 0d       	add	r27, r0
 5f4:	a1 1d       	adc	r26, r1
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 9f       	mul	r23, r19
 5fa:	b0 0d       	add	r27, r0
 5fc:	a1 1d       	adc	r26, r1
 5fe:	62 1f       	adc	r22, r18
 600:	83 9f       	mul	r24, r19
 602:	a0 0d       	add	r26, r0
 604:	61 1d       	adc	r22, r1
 606:	22 1f       	adc	r18, r18
 608:	74 9f       	mul	r23, r20
 60a:	33 27       	eor	r19, r19
 60c:	a0 0d       	add	r26, r0
 60e:	61 1d       	adc	r22, r1
 610:	23 1f       	adc	r18, r19
 612:	84 9f       	mul	r24, r20
 614:	60 0d       	add	r22, r0
 616:	21 1d       	adc	r18, r1
 618:	82 2f       	mov	r24, r18
 61a:	76 2f       	mov	r23, r22
 61c:	6a 2f       	mov	r22, r26
 61e:	11 24       	eor	r1, r1
 620:	9f 57       	subi	r25, 0x7F	; 127
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	8a f0       	brmi	.+34     	; 0x648 <__mulsf3_pse+0x84>
 626:	e1 f0       	breq	.+56     	; 0x660 <__mulsf3_pse+0x9c>
 628:	88 23       	and	r24, r24
 62a:	4a f0       	brmi	.+18     	; 0x63e <__mulsf3_pse+0x7a>
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	bb 1f       	adc	r27, r27
 632:	66 1f       	adc	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	50 40       	sbci	r21, 0x00	; 0
 63c:	a9 f7       	brne	.-22     	; 0x628 <__mulsf3_pse+0x64>
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	51 05       	cpc	r21, r1
 642:	70 f0       	brcs	.+28     	; 0x660 <__mulsf3_pse+0x9c>
 644:	60 cf       	rjmp	.-320    	; 0x506 <__fp_inf>
 646:	aa cf       	rjmp	.-172    	; 0x59c <__fp_szero>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	ec f3       	brlt	.-6      	; 0x646 <__mulsf3_pse+0x82>
 64c:	98 3e       	cpi	r25, 0xE8	; 232
 64e:	dc f3       	brlt	.-10     	; 0x646 <__mulsf3_pse+0x82>
 650:	86 95       	lsr	r24
 652:	77 95       	ror	r23
 654:	67 95       	ror	r22
 656:	b7 95       	ror	r27
 658:	f7 95       	ror	r31
 65a:	e7 95       	ror	r30
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	c1 f7       	brne	.-16     	; 0x650 <__mulsf3_pse+0x8c>
 660:	fe 2b       	or	r31, r30
 662:	88 0f       	add	r24, r24
 664:	91 1d       	adc	r25, r1
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	97 f9       	bld	r25, 7
 66c:	08 95       	ret

0000066e <__divmodhi4>:
 66e:	97 fb       	bst	r25, 7
 670:	09 2e       	mov	r0, r25
 672:	07 26       	eor	r0, r23
 674:	0a d0       	rcall	.+20     	; 0x68a <__divmodhi4_neg1>
 676:	77 fd       	sbrc	r23, 7
 678:	04 d0       	rcall	.+8      	; 0x682 <__divmodhi4_neg2>
 67a:	0c d0       	rcall	.+24     	; 0x694 <__udivmodhi4>
 67c:	06 d0       	rcall	.+12     	; 0x68a <__divmodhi4_neg1>
 67e:	00 20       	and	r0, r0
 680:	1a f4       	brpl	.+6      	; 0x688 <__divmodhi4_exit>

00000682 <__divmodhi4_neg2>:
 682:	70 95       	com	r23
 684:	61 95       	neg	r22
 686:	7f 4f       	sbci	r23, 0xFF	; 255

00000688 <__divmodhi4_exit>:
 688:	08 95       	ret

0000068a <__divmodhi4_neg1>:
 68a:	f6 f7       	brtc	.-4      	; 0x688 <__divmodhi4_exit>
 68c:	90 95       	com	r25
 68e:	81 95       	neg	r24
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	08 95       	ret

00000694 <__udivmodhi4>:
 694:	aa 1b       	sub	r26, r26
 696:	bb 1b       	sub	r27, r27
 698:	51 e1       	ldi	r21, 0x11	; 17
 69a:	07 c0       	rjmp	.+14     	; 0x6aa <__udivmodhi4_ep>

0000069c <__udivmodhi4_loop>:
 69c:	aa 1f       	adc	r26, r26
 69e:	bb 1f       	adc	r27, r27
 6a0:	a6 17       	cp	r26, r22
 6a2:	b7 07       	cpc	r27, r23
 6a4:	10 f0       	brcs	.+4      	; 0x6aa <__udivmodhi4_ep>
 6a6:	a6 1b       	sub	r26, r22
 6a8:	b7 0b       	sbc	r27, r23

000006aa <__udivmodhi4_ep>:
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	5a 95       	dec	r21
 6b0:	a9 f7       	brne	.-22     	; 0x69c <__udivmodhi4_loop>
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	bc 01       	movw	r22, r24
 6b8:	cd 01       	movw	r24, r26
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
