
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800082  00800082  00000d02  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000040e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00004a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fa  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ea  00000000  00000000  00005312  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f6  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000058f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026b  00000000  00000000  00005a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e2  00000000  00000000  00005cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_2>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_16>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	lds	r29, 0x78
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	sts	0xb8, r17
  62:	ba ab       	sts	0x5a, r27
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	sts	0x9b, r26
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	sts	0x5e, r27
  96:	aa aa       	sts	0x9a, r26
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	sts	0x41, r30
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__mulsf3x>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	ec e4       	ldi	r30, 0x4C	; 76
  ea:	fc e0       	ldi	r31, 0x0C	; 12
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a2 38       	cpi	r26, 0x82	; 130
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	a2 e8       	ldi	r26, 0x82	; 130
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a3 39       	cpi	r26, 0x93	; 147
 104:	b1 07       	cpc	r27, r17
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
 10c:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <__vector_1>:
}

//This interrupt takes an input from a button and increases the duty
//cycle.
//Params: in
ISR(INT0_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	//raise set point voltage if less than the max...
	if(set_voltage < maxvoltage)
 122:	80 91 8e 00 	lds	r24, 0x008E
 126:	90 91 8f 00 	lds	r25, 0x008F
 12a:	8e 31       	cpi	r24, 0x1E	; 30
 12c:	91 05       	cpc	r25, r1
 12e:	2c f4       	brge	.+10     	; 0x13a <__vector_1+0x26>
	{
		set_voltage++;  //update integer variable of set voltage
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 8f 00 	sts	0x008F, r25
 136:	80 93 8e 00 	sts	0x008E, r24
	
	/////////////////////// This loop was to test, changing the duty cycle... for the actual project, we need to adjust the set voltage
	// if(OCR1A <= (ICR1 - 1))
	//OCR1A += 0x01;
	//////////////////////
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <__vector_2>:

//This interrupt takes an input from a button and decreases the duty
//cycle.
//Params: in
ISR(INT1_vect){  
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
	//lower set point voltage
	if(set_voltage > 0)
 156:	80 91 8e 00 	lds	r24, 0x008E
 15a:	90 91 8f 00 	lds	r25, 0x008F
 15e:	18 16       	cp	r1, r24
 160:	19 06       	cpc	r1, r25
 162:	2c f4       	brge	.+10     	; 0x16e <__vector_2+0x26>
	{
		set_voltage--;  //update integer variable of set voltage
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	90 93 8f 00 	sts	0x008F, r25
 16a:	80 93 8e 00 	sts	0x008E, r24
	}
	////////////////////// This loop was to test, changing the duty cycle... for the actual project, we need to adjust the setvoltage
	//if(OCR1A > 0x01)
	//OCR1A -= 0x01;
	////////////////////////
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_16>:

//This interrupt reads the ADC port and converts it to a usable value.
//Params: in
ISR(ADC_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
	//Assign the variable theLowADC as the value in the register ADCL
	theLowADC = ADCL; 
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	80 93 92 00 	sts	0x0092, r24
	//Assign theTenBitResults as the value in ADCH shifted 8 left. 
	theTenBitResults = ADCH<<8;  
 192:	25 b1       	in	r18, 0x05	; 5
 194:	92 2f       	mov	r25, r18
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 93 91 00 	sts	0x0091, r25
 19c:	80 93 90 00 	sts	0x0090, r24
	theTenBitResults += theLowADC;
 1a0:	20 91 92 00 	lds	r18, 0x0092
 1a4:	80 91 90 00 	lds	r24, 0x0090
 1a8:	90 91 91 00 	lds	r25, 0x0091
 1ac:	82 0f       	add	r24, r18
 1ae:	91 1d       	adc	r25, r1
 1b0:	90 93 91 00 	sts	0x0091, r25
 1b4:	80 93 90 00 	sts	0x0090, r24
	//Start ADC conversion
	ADCSRA |=1<<ADSC;  
 1b8:	36 9a       	sbi	0x06, 6	; 6
}
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_Z10LCDCommandh>:

//This function sends a Register command to the LCD Display.
//Params: in
void LCDCommand(unsigned char command)
{
	PORTB = command;
 1ca:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~0x03;
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	8c 7f       	andi	r24, 0xFC	; 252
 1d0:	82 bb       	out	0x12, r24	; 18
	PORTD |= 0x80;
 1d2:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d4:	8f ec       	ldi	r24, 0xCF	; 207
 1d6:	97 e0       	ldi	r25, 0x07	; 7
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <_Z10LCDCommandh+0xe>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <_Z10LCDCommandh+0x14>
 1de:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~0x80;
 1e0:	97 98       	cbi	0x12, 7	; 18
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	97 e0       	ldi	r25, 0x07	; 7
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_Z10LCDCommandh+0x1c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z10LCDCommandh+0x22>
 1ec:	00 00       	nop
	_delay_ms(1);
}
 1ee:	08 95       	ret

000001f0 <_Z7LCDDatah>:

//This function sends a character to the display.
//Params: in
void LCDData(unsigned char data)
{
	PORTB = data;
 1f0:	88 bb       	out	0x18, r24	; 24
	PORTD &= ~0x02;
 1f2:	91 98       	cbi	0x12, 1	; 18
	PORTD |= 0x81;	
 1f4:	82 b3       	in	r24, 0x12	; 18
 1f6:	81 68       	ori	r24, 0x81	; 129
 1f8:	82 bb       	out	0x12, r24	; 18
 1fa:	8f ec       	ldi	r24, 0xCF	; 207
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <_Z7LCDDatah+0xe>
 202:	00 c0       	rjmp	.+0      	; 0x204 <_Z7LCDDatah+0x14>
 204:	00 00       	nop
	_delay_ms(1);
	PORTD &= ~0x81;
 206:	82 b3       	in	r24, 0x12	; 18
 208:	8e 77       	andi	r24, 0x7E	; 126
 20a:	82 bb       	out	0x12, r24	; 18
}
 20c:	08 95       	ret

0000020e <_Z7LCDCharch>:

//This function sends a Character to the specified cursor position on 
//the LCD Display.
//Params: in, in
void LCDChar(char text, unsigned char cursorPosition)
{
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
 212:	86 2f       	mov	r24, r22
	LCDCommand(cursorPosition);
 214:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <_Z7LCDCharch+0xe>
 220:	00 c0       	rjmp	.+0      	; 0x222 <_Z7LCDCharch+0x14>
 222:	00 00       	nop
	_delay_ms(1);
	LCDData(text);
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z7LCDDatah>
}
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <_Z7LCDInitv>:
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	99 ef       	ldi	r25, 0xF9	; 249
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <_Z7LCDInitv+0x4>
 236:	00 c0       	rjmp	.+0      	; 0x238 <_Z7LCDInitv+0xa>
 238:	00 00       	nop
//Params: none
void LCDInit()
{
	_delay_ms(32);
	//Function Set
	LCDCommand(0x3C);
 23a:	8c e3       	ldi	r24, 0x3C	; 60
 23c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
	//Display On
	LCDCommand(0x0F);
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
	//Clear Display
	LCDCommand(0x01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
 24c:	8f ec       	ldi	r24, 0xCF	; 207
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <_Z7LCDInitv+0x22>
 254:	00 c0       	rjmp	.+0      	; 0x256 <_Z7LCDInitv+0x28>
 256:	00 00       	nop
	_delay_ms(1);
	//Set Entry Mode
	LCDCommand(0x06);
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
}
 25e:	08 95       	ret

00000260 <_Z9LCDStringPch>:

//This function sends a string value to the specified cursor position on 
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
 266:	86 2f       	mov	r24, r22
	LCDCommand(cursorPosition);
 268:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z10LCDCommandh>
	while(*text)
 26c:	88 81       	ld	r24, Y
 26e:	88 23       	and	r24, r24
 270:	31 f0       	breq	.+12     	; 0x27e <_Z9LCDStringPch+0x1e>
}

//This function sends a string value to the specified cursor position on 
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
 272:	21 96       	adiw	r28, 0x01	; 1
{
	LCDCommand(cursorPosition);
	while(*text)
	{
		LCDData(*text);
 274:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z7LCDDatah>
//the LCD display.
//Params: ref, in
void LCDString(char* text, unsigned char cursorPosition)
{
	LCDCommand(cursorPosition);
	while(*text)
 278:	89 91       	ld	r24, Y+
 27a:	88 23       	and	r24, r24
 27c:	d9 f7       	brne	.-10     	; 0x274 <_Z9LCDStringPch+0x14>
	{
		LCDData(*text);
		text++;
	}
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <_Z10LCDVoltageih>:

//This function converts a float Voltage to characters and sends them to 
//the specified cursor position on the LCD Display.
//Params: in, in
void LCDVoltage(int number, unsigned char cursorStartPos)
{
 284:	3f 92       	push	r3
 286:	4f 92       	push	r4
 288:	5f 92       	push	r5
 28a:	6f 92       	push	r6
 28c:	7f 92       	push	r7
 28e:	8f 92       	push	r8
 290:	9f 92       	push	r9
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	0f 93       	push	r16
 2a0:	1f 93       	push	r17
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	28 97       	sbiw	r28, 0x08	; 8
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	36 2e       	mov	r3, r22
 2b8:	2e 01       	movw	r4, r28
 2ba:	08 94       	sec
 2bc:	41 1c       	adc	r4, r1
 2be:	51 1c       	adc	r5, r1
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f3 e0       	ldi	r31, 0x03	; 3
 2c4:	6f 2e       	mov	r6, r31
 2c6:	77 24       	eor	r7, r7
 2c8:	f0 2d       	mov	r31, r0
	int arr[4];
	int tempNumber;
	for (int i = 1; i <= 4; i++) 
	{
		 index = 4 - i;
		 digit = tempNumber / pow(10, index);
 2ca:	9c 01       	movw	r18, r24
 2cc:	b9 01       	movw	r22, r18
 2ce:	88 27       	eor	r24, r24
 2d0:	77 fd       	sbrc	r23, 7
 2d2:	80 95       	com	r24
 2d4:	98 2f       	mov	r25, r24
 2d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 2da:	4b 01       	movw	r8, r22
 2dc:	5c 01       	movw	r10, r24
 2de:	b3 01       	movw	r22, r6
 2e0:	88 27       	eor	r24, r24
 2e2:	77 fd       	sbrc	r23, 7
 2e4:	80 95       	com	r24
 2e6:	98 2f       	mov	r25, r24
 2e8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	91 e4       	ldi	r25, 0x41	; 65
 2f8:	0e 94 bf 04 	call	0x97e	; 0x97e <pow>
 2fc:	f6 2e       	mov	r15, r22
 2fe:	e7 2e       	mov	r14, r23
 300:	d8 2e       	mov	r13, r24
 302:	c9 2e       	mov	r12, r25
 304:	c5 01       	movw	r24, r10
 306:	b4 01       	movw	r22, r8
 308:	0f 2d       	mov	r16, r15
 30a:	1e 2d       	mov	r17, r14
 30c:	2d 2d       	mov	r18, r13
 30e:	3c 2d       	mov	r19, r12
 310:	a9 01       	movw	r20, r18
 312:	98 01       	movw	r18, r16
 314:	0e 94 35 03 	call	0x66a	; 0x66a <__divsf3>
 318:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 31c:	dc 01       	movw	r26, r24
 31e:	cb 01       	movw	r24, r22
		 arr[i-1] = digit;
 320:	f2 01       	movw	r30, r4
 322:	81 93       	st	Z+, r24
 324:	91 93       	st	Z+, r25
 326:	2f 01       	movw	r4, r30
		 tempNumber = tempNumber - pow(10, index) * digit;
 328:	9c 01       	movw	r18, r24
 32a:	b9 01       	movw	r22, r18
 32c:	88 27       	eor	r24, r24
 32e:	77 fd       	sbrc	r23, 7
 330:	80 95       	com	r24
 332:	98 2f       	mov	r25, r24
 334:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 338:	9b 01       	movw	r18, r22
 33a:	ac 01       	movw	r20, r24
 33c:	8f 2d       	mov	r24, r15
 33e:	9e 2d       	mov	r25, r14
 340:	ad 2d       	mov	r26, r13
 342:	bc 2d       	mov	r27, r12
 344:	bc 01       	movw	r22, r24
 346:	cd 01       	movw	r24, r26
 348:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__mulsf3>
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	c5 01       	movw	r24, r10
 352:	b4 01       	movw	r22, r8
 354:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__subsf3>
 358:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	08 94       	sec
 362:	61 08       	sbc	r6, r1
 364:	71 08       	sbc	r7, r1
{
	int index;
	int digit;
	int arr[4];
	int tempNumber;
	for (int i = 1; i <= 4; i++) 
 366:	3f ef       	ldi	r19, 0xFF	; 255
 368:	63 16       	cp	r6, r19
 36a:	3f ef       	ldi	r19, 0xFF	; 255
 36c:	73 06       	cpc	r7, r19
 36e:	09 f0       	breq	.+2      	; 0x372 <_Z10LCDVoltageih+0xee>
 370:	ac cf       	rjmp	.-168    	; 0x2ca <_Z10LCDVoltageih+0x46>
		 index = 4 - i;
		 digit = tempNumber / pow(10, index);
		 arr[i-1] = digit;
		 tempNumber = tempNumber - pow(10, index) * digit;
	}
	char hundredth = arr[3] + charOffset;
 372:	0f 81       	ldd	r16, Y+7	; 0x07
 374:	00 5d       	subi	r16, 0xD0	; 208
	char tenth = arr[2] + charOffset;
 376:	1d 81       	ldd	r17, Y+5	; 0x05
 378:	10 5d       	subi	r17, 0xD0	; 208
	char ones = arr[1] + charOffset;
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	0f 2e       	mov	r0, r31
 37e:	f0 e3       	ldi	r31, 0x30	; 48
 380:	ff 2e       	mov	r15, r31
 382:	f0 2d       	mov	r31, r0
 384:	f8 0e       	add	r15, r24
	char tens = arr[0] + charOffset;
 386:	89 81       	ldd	r24, Y+1	; 0x01
	
	LCDChar(tens,cursorStartPos);
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	63 2d       	mov	r22, r3
 38c:	0e 94 07 01 	call	0x20e	; 0x20e <_Z7LCDCharch>
	LCDChar(ones,cursorStartPos + 1);
 390:	63 2d       	mov	r22, r3
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	8f 2d       	mov	r24, r15
 396:	0e 94 07 01 	call	0x20e	; 0x20e <_Z7LCDCharch>
	LCDChar(tenth,cursorStartPos + 3);
 39a:	63 2d       	mov	r22, r3
 39c:	6d 5f       	subi	r22, 0xFD	; 253
 39e:	81 2f       	mov	r24, r17
 3a0:	0e 94 07 01 	call	0x20e	; 0x20e <_Z7LCDCharch>
	LCDChar(hundredth,cursorStartPos + 4);
 3a4:	63 2d       	mov	r22, r3
 3a6:	6c 5f       	subi	r22, 0xFC	; 252
 3a8:	80 2f       	mov	r24, r16
 3aa:	0e 94 07 01 	call	0x20e	; 0x20e <_Z7LCDCharch>
 3ae:	28 96       	adiw	r28, 0x08	; 8
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	9f 90       	pop	r9
 3d0:	8f 90       	pop	r8
 3d2:	7f 90       	pop	r7
 3d4:	6f 90       	pop	r6
 3d6:	5f 90       	pop	r5
 3d8:	4f 90       	pop	r4
 3da:	3f 90       	pop	r3
 3dc:	08 95       	ret

000003de <main>:

int main(void)
{

	//Disable Interrupts
	cli();
 3de:	f8 94       	cli
	//Set data direction
	DDRD = 0xA3;
 3e0:	83 ea       	ldi	r24, 0xA3	; 163
 3e2:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	87 bb       	out	0x17, r24	; 23
	DDRA |= (1 << 1);
 3e8:	d1 9a       	sbi	0x1a, 1	; 26
	// set PORTA initial values
	PORTA = 0x00;
 3ea:	1b ba       	out	0x1b, r1	; 27
	//Set counter options
	TCCR1A = 0xA2;
 3ec:	82 ea       	ldi	r24, 0xA2	; 162
 3ee:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;
 3f0:	89 e1       	ldi	r24, 0x19	; 25
 3f2:	8e bd       	out	0x2e, r24	; 46
	//Set TOP = ICR1 for 24.5kHz
	ICR1 = 0x090;
 3f4:	80 e9       	ldi	r24, 0x90	; 144
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	97 bd       	out	0x27, r25	; 39
 3fa:	86 bd       	out	0x26, r24	; 38
	//Arbitrarily Set OCR1A (Duty Cycle)
	OCR1A = 0x05;
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9b bd       	out	0x2b, r25	; 43
 402:	8a bd       	out	0x2a, r24	; 42
	//Enable INT0 and INT1
	GICR |= 1<<INT0 | 1<<INT1;
 404:	8b b7       	in	r24, 0x3b	; 59
 406:	80 6c       	ori	r24, 0xC0	; 192
 408:	8b bf       	out	0x3b, r24	; 59
	//Set Falling Edge Trigger for Interrupts
	MCUCR |= 1<<ISC01 | 1<<ISC00 | 1<<ISC11 | 1<<ISC10;
 40a:	85 b7       	in	r24, 0x35	; 53
 40c:	8f 60       	ori	r24, 0x0F	; 15
 40e:	85 bf       	out	0x35, r24	; 53
	//Set ADC prescaler to division of 16, so at a clk f of 8Mhz,
	//ADC speed is 500kHz. See table 85 in datasheet for prescaler
	//selection options.
	ADCSRA |= 1<<ADPS2;
 410:	32 9a       	sbi	0x06, 2	; 6
	//Set voltage reference as AVCC, should be 5 V? binary= 01000000  See Page 208 or214
	ADMUX = 0x40;
 412:	80 e4       	ldi	r24, 0x40	; 64
 414:	87 b9       	out	0x07, r24	; 7
	//Enable Start Conversion
	ADCSRA |= 1<<ADSC;
 416:	36 9a       	sbi	0x06, 6	; 6
	//Enable ADC interrupt
	ADCSRA |= 1<<ADIE;
 418:	33 9a       	sbi	0x06, 3	; 6
	//Enable the ADC
	ADCSRA |= 1<<ADEN;
 41a:	37 9a       	sbi	0x06, 7	; 6
	//Re-enable Interrupts
	sei();
 41c:	78 94       	sei
	
	LCDInit();
 41e:	0e 94 17 01 	call	0x22e	; 0x22e <_Z7LCDInitv>
	LCDString("  ADC Voltage:  ",0x80);
 422:	80 e6       	ldi	r24, 0x60	; 96
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	60 e8       	ldi	r22, 0x80	; 128
 428:	0e 94 30 01 	call	0x260	; 0x260 <_Z9LCDStringPch>
	LCDString("     00.00V     ",0xC0);
 42c:	81 e7       	ldi	r24, 0x71	; 113
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	60 ec       	ldi	r22, 0xC0	; 192
 432:	0e 94 30 01 	call	0x260	; 0x260 <_Z9LCDStringPch>
	//setup PID
	previous_error = set_voltage - feedback_voltage; //calculate the previous difference between set and ADC input voltage
 436:	80 91 8e 00 	lds	r24, 0x008E
 43a:	90 91 8f 00 	lds	r25, 0x008F
 43e:	20 91 88 00 	lds	r18, 0x0088
 442:	30 91 89 00 	lds	r19, 0x0089
 446:	82 1b       	sub	r24, r18
 448:	93 0b       	sbc	r25, r19
 44a:	90 93 8d 00 	sts	0x008D, r25
 44e:	80 93 8c 00 	sts	0x008C, r24
	{
		//_delay_ms(4000*_dt_); //delay within the loop
		
		
		//Calculate Proportional Error
		error = set_voltage - feedback_voltage;
 452:	a0 90 8e 00 	lds	r10, 0x008E
 456:	b0 90 8f 00 	lds	r11, 0x008F
 45a:	80 91 88 00 	lds	r24, 0x0088
 45e:	90 91 89 00 	lds	r25, 0x0089
 462:	a8 1a       	sub	r10, r24
 464:	b9 0a       	sbc	r11, r25
 466:	b0 92 8b 00 	sts	0x008B, r11
 46a:	a0 92 8a 00 	sts	0x008A, r10
		
		//Calculate Integral Error by summing up small small errors
		I_error += (error)*_dt_;
 46e:	b5 01       	movw	r22, r10
 470:	88 27       	eor	r24, r24
 472:	77 fd       	sbrc	r23, 7
 474:	80 95       	com	r24
 476:	98 2f       	mov	r25, r24
 478:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	5f e3       	ldi	r21, 0x3F	; 63
 484:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__mulsf3>
 488:	c6 2e       	mov	r12, r22
 48a:	c7 2f       	mov	r28, r23
 48c:	d8 2f       	mov	r29, r24
 48e:	f9 2e       	mov	r15, r25
 490:	60 91 82 00 	lds	r22, 0x0082
 494:	70 91 83 00 	lds	r23, 0x0083
 498:	88 27       	eor	r24, r24
 49a:	77 fd       	sbrc	r23, 7
 49c:	80 95       	com	r24
 49e:	98 2f       	mov	r25, r24
 4a0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 4a4:	0c 2d       	mov	r16, r12
 4a6:	1c 2f       	mov	r17, r28
 4a8:	2d 2f       	mov	r18, r29
 4aa:	3f 2d       	mov	r19, r15
 4ac:	a9 01       	movw	r20, r18
 4ae:	98 01       	movw	r18, r16
 4b0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__addsf3>
 4b4:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 4b8:	dc 01       	movw	r26, r24
 4ba:	cb 01       	movw	r24, r22
 4bc:	4c 01       	movw	r8, r24
 4be:	90 93 83 00 	sts	0x0083, r25
 4c2:	80 93 82 00 	sts	0x0082, r24
		
		//Calculate Differential Error, by dividing error by time interval
		D_error = (error - previous_error)/_dt_;
 4c6:	80 91 8c 00 	lds	r24, 0x008C
 4ca:	90 91 8d 00 	lds	r25, 0x008D
 4ce:	b5 01       	movw	r22, r10
 4d0:	68 1b       	sub	r22, r24
 4d2:	79 0b       	sbc	r23, r25
 4d4:	88 27       	eor	r24, r24
 4d6:	77 fd       	sbrc	r23, 7
 4d8:	80 95       	com	r24
 4da:	98 2f       	mov	r25, r24
 4dc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 4e0:	9b 01       	movw	r18, r22
 4e2:	ac 01       	movw	r20, r24
 4e4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__addsf3>
 4e8:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 4ec:	dc 01       	movw	r26, r24
 4ee:	cb 01       	movw	r24, r22
 4f0:	8c 01       	movw	r16, r24
 4f2:	90 93 85 00 	sts	0x0085, r25
 4f6:	80 93 84 00 	sts	0x0084, r24

		//Get output by summing up respective errors multiplied with their respective Gains
		output = (P_GAIN * error) + (I_GAIN * I_error) + (D_GAIN * D_error);
 4fa:	b4 01       	movw	r22, r8
 4fc:	88 27       	eor	r24, r24
 4fe:	77 fd       	sbrc	r23, 7
 500:	80 95       	com	r24
 502:	98 2f       	mov	r25, r24
 504:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 508:	2f e6       	ldi	r18, 0x6F	; 111
 50a:	32 e1       	ldi	r19, 0x12	; 18
 50c:	43 e8       	ldi	r20, 0x83	; 131
 50e:	5a e3       	ldi	r21, 0x3A	; 58
 510:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__mulsf3>
 514:	9b 01       	movw	r18, r22
 516:	ac 01       	movw	r20, r24
 518:	8c 2d       	mov	r24, r12
 51a:	9c 2f       	mov	r25, r28
 51c:	ad 2f       	mov	r26, r29
 51e:	bf 2d       	mov	r27, r15
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__addsf3>
 528:	6b 01       	movw	r12, r22
 52a:	7c 01       	movw	r14, r24
 52c:	b8 01       	movw	r22, r16
 52e:	88 27       	eor	r24, r24
 530:	77 fd       	sbrc	r23, 7
 532:	80 95       	com	r24
 534:	98 2f       	mov	r25, r24
 536:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__floatsisf>
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	a9 01       	movw	r20, r18
 540:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__mulsf3>
 544:	9b 01       	movw	r18, r22
 546:	ac 01       	movw	r20, r24
 548:	c7 01       	movw	r24, r14
 54a:	b6 01       	movw	r22, r12
 54c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__addsf3>
 550:	0e 94 9d 03 	call	0x73a	; 0x73a <__fixsfsi>
 554:	60 93 86 00 	sts	0x0086, r22
 558:	70 93 87 00 	sts	0x0087, r23
		
		//set OCR1A Duty cycle to output
		OCR1A = output;
 55c:	86 2f       	mov	r24, r22
 55e:	97 2f       	mov	r25, r23
 560:	9b bd       	out	0x2b, r25	; 43
 562:	8a bd       	out	0x2a, r24	; 42
		
		//Update Previous error
		previous_error = error;
 564:	b0 92 8d 00 	sts	0x008D, r11
 568:	a0 92 8c 00 	sts	0x008C, r10
 56c:	8f eb       	ldi	r24, 0xBF	; 191
 56e:	99 e3       	ldi	r25, 0x39	; 57
 570:	a6 e0       	ldi	r26, 0x06	; 6
 572:	81 50       	subi	r24, 0x01	; 1
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	a0 40       	sbci	r26, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <main+0x194>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0x19e>
 57c:	00 00       	nop
		_delay_ms(255);
		feedback_voltage = theTenBitResults * 3;
 57e:	20 91 90 00 	lds	r18, 0x0090
 582:	30 91 91 00 	lds	r19, 0x0091
 586:	c9 01       	movw	r24, r18
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	80 93 88 00 	sts	0x0088, r24
 594:	90 93 89 00 	sts	0x0089, r25
		LCDVoltage(feedback_voltage,0xC5);
 598:	65 ec       	ldi	r22, 0xC5	; 197
 59a:	0e 94 42 01 	call	0x284	; 0x284 <_Z10LCDVoltageih>
 59e:	59 cf       	rjmp	.-334    	; 0x452 <main+0x74>

000005a0 <__subsf3>:
 5a0:	50 58       	subi	r21, 0x80	; 128

000005a2 <__addsf3>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	aa 27       	eor	r26, r26
 5a6:	0e d0       	rcall	.+28     	; 0x5c4 <__addsf3x>
 5a8:	4d c1       	rjmp	.+666    	; 0x844 <__fp_round>
 5aa:	3e d1       	rcall	.+636    	; 0x828 <__fp_pscA>
 5ac:	30 f0       	brcs	.+12     	; 0x5ba <__addsf3+0x18>
 5ae:	43 d1       	rcall	.+646    	; 0x836 <__fp_pscB>
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__addsf3+0x18>
 5b2:	31 f4       	brne	.+12     	; 0x5c0 <__addsf3+0x1e>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__addsf3+0x1a>
 5b8:	1e f4       	brtc	.+6      	; 0x5c0 <__addsf3+0x1e>
 5ba:	33 c1       	rjmp	.+614    	; 0x822 <__fp_nan>
 5bc:	0e f4       	brtc	.+2      	; 0x5c0 <__addsf3+0x1e>
 5be:	e0 95       	com	r30
 5c0:	e7 fb       	bst	r30, 7
 5c2:	29 c1       	rjmp	.+594    	; 0x816 <__fp_inf>

000005c4 <__addsf3x>:
 5c4:	e9 2f       	mov	r30, r25
 5c6:	4f d1       	rcall	.+670    	; 0x866 <__fp_split3>
 5c8:	80 f3       	brcs	.-32     	; 0x5aa <__addsf3+0x8>
 5ca:	ba 17       	cp	r27, r26
 5cc:	62 07       	cpc	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	18 f0       	brcs	.+6      	; 0x5dc <__addsf3x+0x18>
 5d6:	71 f4       	brne	.+28     	; 0x5f4 <__addsf3x+0x30>
 5d8:	9e f5       	brtc	.+102    	; 0x640 <__addsf3x+0x7c>
 5da:	67 c1       	rjmp	.+718    	; 0x8aa <__fp_zero>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3x+0x1c>
 5de:	e0 95       	com	r30
 5e0:	0b 2e       	mov	r0, r27
 5e2:	ba 2f       	mov	r27, r26
 5e4:	a0 2d       	mov	r26, r0
 5e6:	0b 01       	movw	r0, r22
 5e8:	b9 01       	movw	r22, r18
 5ea:	90 01       	movw	r18, r0
 5ec:	0c 01       	movw	r0, r24
 5ee:	ca 01       	movw	r24, r20
 5f0:	a0 01       	movw	r20, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	ff 27       	eor	r31, r31
 5f6:	59 1b       	sub	r21, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <__addsf3x+0x5c>
 5fa:	59 3f       	cpi	r21, 0xF9	; 249
 5fc:	50 f4       	brcc	.+20     	; 0x612 <__addsf3x+0x4e>
 5fe:	50 3e       	cpi	r21, 0xE0	; 224
 600:	68 f1       	brcs	.+90     	; 0x65c <__addsf3x+0x98>
 602:	1a 16       	cp	r1, r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	a2 2f       	mov	r26, r18
 608:	23 2f       	mov	r18, r19
 60a:	34 2f       	mov	r19, r20
 60c:	44 27       	eor	r20, r20
 60e:	58 5f       	subi	r21, 0xF8	; 248
 610:	f3 cf       	rjmp	.-26     	; 0x5f8 <__addsf3x+0x34>
 612:	46 95       	lsr	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
 618:	a7 95       	ror	r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	53 95       	inc	r21
 61e:	c9 f7       	brne	.-14     	; 0x612 <__addsf3x+0x4e>
 620:	7e f4       	brtc	.+30     	; 0x640 <__addsf3x+0x7c>
 622:	1f 16       	cp	r1, r31
 624:	ba 0b       	sbc	r27, r26
 626:	62 0b       	sbc	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	ba f0       	brmi	.+46     	; 0x65c <__addsf3x+0x98>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	a1 f0       	breq	.+40     	; 0x65a <__addsf3x+0x96>
 632:	ff 0f       	add	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	c2 f7       	brpl	.-16     	; 0x62e <__addsf3x+0x6a>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__addsf3x+0x98>
 640:	ba 0f       	add	r27, r26
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
 646:	84 1f       	adc	r24, r20
 648:	48 f4       	brcc	.+18     	; 0x65c <__addsf3x+0x98>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x96>
 658:	b3 cf       	rjmp	.-154    	; 0x5c0 <__addsf3+0x1e>
 65a:	93 95       	inc	r25
 65c:	88 0f       	add	r24, r24
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0x9e>
 660:	99 27       	eor	r25, r25
 662:	ee 0f       	add	r30, r30
 664:	97 95       	ror	r25
 666:	87 95       	ror	r24
 668:	08 95       	ret

0000066a <__divsf3>:
 66a:	0c d0       	rcall	.+24     	; 0x684 <__divsf3x>
 66c:	eb c0       	rjmp	.+470    	; 0x844 <__fp_round>
 66e:	e3 d0       	rcall	.+454    	; 0x836 <__fp_pscB>
 670:	40 f0       	brcs	.+16     	; 0x682 <__divsf3+0x18>
 672:	da d0       	rcall	.+436    	; 0x828 <__fp_pscA>
 674:	30 f0       	brcs	.+12     	; 0x682 <__divsf3+0x18>
 676:	21 f4       	brne	.+8      	; 0x680 <__divsf3+0x16>
 678:	5f 3f       	cpi	r21, 0xFF	; 255
 67a:	19 f0       	breq	.+6      	; 0x682 <__divsf3+0x18>
 67c:	cc c0       	rjmp	.+408    	; 0x816 <__fp_inf>
 67e:	51 11       	cpse	r21, r1
 680:	15 c1       	rjmp	.+554    	; 0x8ac <__fp_szero>
 682:	cf c0       	rjmp	.+414    	; 0x822 <__fp_nan>

00000684 <__divsf3x>:
 684:	f0 d0       	rcall	.+480    	; 0x866 <__fp_split3>
 686:	98 f3       	brcs	.-26     	; 0x66e <__divsf3+0x4>

00000688 <__divsf3_pse>:
 688:	99 23       	and	r25, r25
 68a:	c9 f3       	breq	.-14     	; 0x67e <__divsf3+0x14>
 68c:	55 23       	and	r21, r21
 68e:	b1 f3       	breq	.-20     	; 0x67c <__divsf3+0x12>
 690:	95 1b       	sub	r25, r21
 692:	55 0b       	sbc	r21, r21
 694:	bb 27       	eor	r27, r27
 696:	aa 27       	eor	r26, r26
 698:	62 17       	cp	r22, r18
 69a:	73 07       	cpc	r23, r19
 69c:	84 07       	cpc	r24, r20
 69e:	38 f0       	brcs	.+14     	; 0x6ae <__divsf3_pse+0x26>
 6a0:	9f 5f       	subi	r25, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	22 0f       	add	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	44 1f       	adc	r20, r20
 6aa:	aa 1f       	adc	r26, r26
 6ac:	a9 f3       	breq	.-22     	; 0x698 <__divsf3_pse+0x10>
 6ae:	33 d0       	rcall	.+102    	; 0x716 <__divsf3_pse+0x8e>
 6b0:	0e 2e       	mov	r0, r30
 6b2:	3a f0       	brmi	.+14     	; 0x6c2 <__divsf3_pse+0x3a>
 6b4:	e0 e8       	ldi	r30, 0x80	; 128
 6b6:	30 d0       	rcall	.+96     	; 0x718 <__divsf3_pse+0x90>
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	50 40       	sbci	r21, 0x00	; 0
 6bc:	e6 95       	lsr	r30
 6be:	00 1c       	adc	r0, r0
 6c0:	ca f7       	brpl	.-14     	; 0x6b4 <__divsf3_pse+0x2c>
 6c2:	29 d0       	rcall	.+82     	; 0x716 <__divsf3_pse+0x8e>
 6c4:	fe 2f       	mov	r31, r30
 6c6:	27 d0       	rcall	.+78     	; 0x716 <__divsf3_pse+0x8e>
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	bb 1f       	adc	r27, r27
 6d0:	26 17       	cp	r18, r22
 6d2:	37 07       	cpc	r19, r23
 6d4:	48 07       	cpc	r20, r24
 6d6:	ab 07       	cpc	r26, r27
 6d8:	b0 e8       	ldi	r27, 0x80	; 128
 6da:	09 f0       	breq	.+2      	; 0x6de <__divsf3_pse+0x56>
 6dc:	bb 0b       	sbc	r27, r27
 6de:	80 2d       	mov	r24, r0
 6e0:	bf 01       	movw	r22, r30
 6e2:	ff 27       	eor	r31, r31
 6e4:	93 58       	subi	r25, 0x83	; 131
 6e6:	5f 4f       	sbci	r21, 0xFF	; 255
 6e8:	2a f0       	brmi	.+10     	; 0x6f4 <__divsf3_pse+0x6c>
 6ea:	9e 3f       	cpi	r25, 0xFE	; 254
 6ec:	51 05       	cpc	r21, r1
 6ee:	68 f0       	brcs	.+26     	; 0x70a <__divsf3_pse+0x82>
 6f0:	92 c0       	rjmp	.+292    	; 0x816 <__fp_inf>
 6f2:	dc c0       	rjmp	.+440    	; 0x8ac <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	ec f3       	brlt	.-6      	; 0x6f2 <__divsf3_pse+0x6a>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	dc f3       	brlt	.-10     	; 0x6f2 <__divsf3_pse+0x6a>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	9f 5f       	subi	r25, 0xFF	; 255
 708:	c9 f7       	brne	.-14     	; 0x6fc <__divsf3_pse+0x74>
 70a:	88 0f       	add	r24, r24
 70c:	91 1d       	adc	r25, r1
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret
 716:	e1 e0       	ldi	r30, 0x01	; 1
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	bb 1f       	adc	r27, r27
 720:	62 17       	cp	r22, r18
 722:	73 07       	cpc	r23, r19
 724:	84 07       	cpc	r24, r20
 726:	ba 07       	cpc	r27, r26
 728:	20 f0       	brcs	.+8      	; 0x732 <__divsf3_pse+0xaa>
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	84 0b       	sbc	r24, r20
 730:	ba 0b       	sbc	r27, r26
 732:	ee 1f       	adc	r30, r30
 734:	88 f7       	brcc	.-30     	; 0x718 <__divsf3_pse+0x90>
 736:	e0 95       	com	r30
 738:	08 95       	ret

0000073a <__fixsfsi>:
 73a:	04 d0       	rcall	.+8      	; 0x744 <__fixunssfsi>
 73c:	68 94       	set
 73e:	b1 11       	cpse	r27, r1
 740:	b5 c0       	rjmp	.+362    	; 0x8ac <__fp_szero>
 742:	08 95       	ret

00000744 <__fixunssfsi>:
 744:	98 d0       	rcall	.+304    	; 0x876 <__fp_splitA>
 746:	88 f0       	brcs	.+34     	; 0x76a <__fixunssfsi+0x26>
 748:	9f 57       	subi	r25, 0x7F	; 127
 74a:	90 f0       	brcs	.+36     	; 0x770 <__fixunssfsi+0x2c>
 74c:	b9 2f       	mov	r27, r25
 74e:	99 27       	eor	r25, r25
 750:	b7 51       	subi	r27, 0x17	; 23
 752:	a0 f0       	brcs	.+40     	; 0x77c <__fixunssfsi+0x38>
 754:	d1 f0       	breq	.+52     	; 0x78a <__fixunssfsi+0x46>
 756:	66 0f       	add	r22, r22
 758:	77 1f       	adc	r23, r23
 75a:	88 1f       	adc	r24, r24
 75c:	99 1f       	adc	r25, r25
 75e:	1a f0       	brmi	.+6      	; 0x766 <__fixunssfsi+0x22>
 760:	ba 95       	dec	r27
 762:	c9 f7       	brne	.-14     	; 0x756 <__fixunssfsi+0x12>
 764:	12 c0       	rjmp	.+36     	; 0x78a <__fixunssfsi+0x46>
 766:	b1 30       	cpi	r27, 0x01	; 1
 768:	81 f0       	breq	.+32     	; 0x78a <__fixunssfsi+0x46>
 76a:	9f d0       	rcall	.+318    	; 0x8aa <__fp_zero>
 76c:	b1 e0       	ldi	r27, 0x01	; 1
 76e:	08 95       	ret
 770:	9c c0       	rjmp	.+312    	; 0x8aa <__fp_zero>
 772:	67 2f       	mov	r22, r23
 774:	78 2f       	mov	r23, r24
 776:	88 27       	eor	r24, r24
 778:	b8 5f       	subi	r27, 0xF8	; 248
 77a:	39 f0       	breq	.+14     	; 0x78a <__fixunssfsi+0x46>
 77c:	b9 3f       	cpi	r27, 0xF9	; 249
 77e:	cc f3       	brlt	.-14     	; 0x772 <__fixunssfsi+0x2e>
 780:	86 95       	lsr	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b3 95       	inc	r27
 788:	d9 f7       	brne	.-10     	; 0x780 <__fixunssfsi+0x3c>
 78a:	3e f4       	brtc	.+14     	; 0x79a <__fixunssfsi+0x56>
 78c:	90 95       	com	r25
 78e:	80 95       	com	r24
 790:	70 95       	com	r23
 792:	61 95       	neg	r22
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	08 95       	ret

0000079c <__floatunsisf>:
 79c:	e8 94       	clt
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <__floatsisf+0x12>

000007a0 <__floatsisf>:
 7a0:	97 fb       	bst	r25, 7
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__floatsisf+0x12>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	99 23       	and	r25, r25
 7b4:	a9 f0       	breq	.+42     	; 0x7e0 <__floatsisf+0x40>
 7b6:	f9 2f       	mov	r31, r25
 7b8:	96 e9       	ldi	r25, 0x96	; 150
 7ba:	bb 27       	eor	r27, r27
 7bc:	93 95       	inc	r25
 7be:	f6 95       	lsr	r31
 7c0:	87 95       	ror	r24
 7c2:	77 95       	ror	r23
 7c4:	67 95       	ror	r22
 7c6:	b7 95       	ror	r27
 7c8:	f1 11       	cpse	r31, r1
 7ca:	f8 cf       	rjmp	.-16     	; 0x7bc <__floatsisf+0x1c>
 7cc:	fa f4       	brpl	.+62     	; 0x80c <__floatsisf+0x6c>
 7ce:	bb 0f       	add	r27, r27
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__floatsisf+0x36>
 7d2:	60 ff       	sbrs	r22, 0
 7d4:	1b c0       	rjmp	.+54     	; 0x80c <__floatsisf+0x6c>
 7d6:	6f 5f       	subi	r22, 0xFF	; 255
 7d8:	7f 4f       	sbci	r23, 0xFF	; 255
 7da:	8f 4f       	sbci	r24, 0xFF	; 255
 7dc:	9f 4f       	sbci	r25, 0xFF	; 255
 7de:	16 c0       	rjmp	.+44     	; 0x80c <__floatsisf+0x6c>
 7e0:	88 23       	and	r24, r24
 7e2:	11 f0       	breq	.+4      	; 0x7e8 <__floatsisf+0x48>
 7e4:	96 e9       	ldi	r25, 0x96	; 150
 7e6:	11 c0       	rjmp	.+34     	; 0x80a <__floatsisf+0x6a>
 7e8:	77 23       	and	r23, r23
 7ea:	21 f0       	breq	.+8      	; 0x7f4 <__floatsisf+0x54>
 7ec:	9e e8       	ldi	r25, 0x8E	; 142
 7ee:	87 2f       	mov	r24, r23
 7f0:	76 2f       	mov	r23, r22
 7f2:	05 c0       	rjmp	.+10     	; 0x7fe <__floatsisf+0x5e>
 7f4:	66 23       	and	r22, r22
 7f6:	71 f0       	breq	.+28     	; 0x814 <__floatsisf+0x74>
 7f8:	96 e8       	ldi	r25, 0x86	; 134
 7fa:	86 2f       	mov	r24, r22
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	2a f0       	brmi	.+10     	; 0x80c <__floatsisf+0x6c>
 802:	9a 95       	dec	r25
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	da f7       	brpl	.-10     	; 0x802 <__floatsisf+0x62>
 80c:	88 0f       	add	r24, r24
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__fp_inf>:
 816:	97 f9       	bld	r25, 7
 818:	9f 67       	ori	r25, 0x7F	; 127
 81a:	80 e8       	ldi	r24, 0x80	; 128
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	08 95       	ret

00000822 <__fp_nan>:
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	80 ec       	ldi	r24, 0xC0	; 192
 826:	08 95       	ret

00000828 <__fp_pscA>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	09 06       	cpc	r0, r25
 834:	08 95       	ret

00000836 <__fp_pscB>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	05 06       	cpc	r0, r21
 842:	08 95       	ret

00000844 <__fp_round>:
 844:	09 2e       	mov	r0, r25
 846:	03 94       	inc	r0
 848:	00 0c       	add	r0, r0
 84a:	11 f4       	brne	.+4      	; 0x850 <__fp_round+0xc>
 84c:	88 23       	and	r24, r24
 84e:	52 f0       	brmi	.+20     	; 0x864 <__stack+0x5>
 850:	bb 0f       	add	r27, r27
 852:	40 f4       	brcc	.+16     	; 0x864 <__stack+0x5>
 854:	bf 2b       	or	r27, r31
 856:	11 f4       	brne	.+4      	; 0x85c <__fp_round+0x18>
 858:	60 ff       	sbrs	r22, 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__stack+0x5>
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <__fp_split3>:
 866:	57 fd       	sbrc	r21, 7
 868:	90 58       	subi	r25, 0x80	; 128
 86a:	44 0f       	add	r20, r20
 86c:	55 1f       	adc	r21, r21
 86e:	59 f0       	breq	.+22     	; 0x886 <__fp_splitA+0x10>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	71 f0       	breq	.+28     	; 0x890 <__fp_splitA+0x1a>
 874:	47 95       	ror	r20

00000876 <__fp_splitA>:
 876:	88 0f       	add	r24, r24
 878:	97 fb       	bst	r25, 7
 87a:	99 1f       	adc	r25, r25
 87c:	61 f0       	breq	.+24     	; 0x896 <__fp_splitA+0x20>
 87e:	9f 3f       	cpi	r25, 0xFF	; 255
 880:	79 f0       	breq	.+30     	; 0x8a0 <__fp_splitA+0x2a>
 882:	87 95       	ror	r24
 884:	08 95       	ret
 886:	12 16       	cp	r1, r18
 888:	13 06       	cpc	r1, r19
 88a:	14 06       	cpc	r1, r20
 88c:	55 1f       	adc	r21, r21
 88e:	f2 cf       	rjmp	.-28     	; 0x874 <__fp_split3+0xe>
 890:	46 95       	lsr	r20
 892:	f1 df       	rcall	.-30     	; 0x876 <__fp_splitA>
 894:	08 c0       	rjmp	.+16     	; 0x8a6 <__fp_splitA+0x30>
 896:	16 16       	cp	r1, r22
 898:	17 06       	cpc	r1, r23
 89a:	18 06       	cpc	r1, r24
 89c:	99 1f       	adc	r25, r25
 89e:	f1 cf       	rjmp	.-30     	; 0x882 <__fp_splitA+0xc>
 8a0:	86 95       	lsr	r24
 8a2:	71 05       	cpc	r23, r1
 8a4:	61 05       	cpc	r22, r1
 8a6:	08 94       	sec
 8a8:	08 95       	ret

000008aa <__fp_zero>:
 8aa:	e8 94       	clt

000008ac <__fp_szero>:
 8ac:	bb 27       	eor	r27, r27
 8ae:	66 27       	eor	r22, r22
 8b0:	77 27       	eor	r23, r23
 8b2:	cb 01       	movw	r24, r22
 8b4:	97 f9       	bld	r25, 7
 8b6:	08 95       	ret

000008b8 <__mulsf3>:
 8b8:	0b d0       	rcall	.+22     	; 0x8d0 <__mulsf3x>
 8ba:	c4 cf       	rjmp	.-120    	; 0x844 <__fp_round>
 8bc:	b5 df       	rcall	.-150    	; 0x828 <__fp_pscA>
 8be:	28 f0       	brcs	.+10     	; 0x8ca <__mulsf3+0x12>
 8c0:	ba df       	rcall	.-140    	; 0x836 <__fp_pscB>
 8c2:	18 f0       	brcs	.+6      	; 0x8ca <__mulsf3+0x12>
 8c4:	95 23       	and	r25, r21
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__mulsf3+0x12>
 8c8:	a6 cf       	rjmp	.-180    	; 0x816 <__fp_inf>
 8ca:	ab cf       	rjmp	.-170    	; 0x822 <__fp_nan>
 8cc:	11 24       	eor	r1, r1
 8ce:	ee cf       	rjmp	.-36     	; 0x8ac <__fp_szero>

000008d0 <__mulsf3x>:
 8d0:	ca df       	rcall	.-108    	; 0x866 <__fp_split3>
 8d2:	a0 f3       	brcs	.-24     	; 0x8bc <__mulsf3+0x4>

000008d4 <__mulsf3_pse>:
 8d4:	95 9f       	mul	r25, r21
 8d6:	d1 f3       	breq	.-12     	; 0x8cc <__mulsf3+0x14>
 8d8:	95 0f       	add	r25, r21
 8da:	50 e0       	ldi	r21, 0x00	; 0
 8dc:	55 1f       	adc	r21, r21
 8de:	62 9f       	mul	r22, r18
 8e0:	f0 01       	movw	r30, r0
 8e2:	72 9f       	mul	r23, r18
 8e4:	bb 27       	eor	r27, r27
 8e6:	f0 0d       	add	r31, r0
 8e8:	b1 1d       	adc	r27, r1
 8ea:	63 9f       	mul	r22, r19
 8ec:	aa 27       	eor	r26, r26
 8ee:	f0 0d       	add	r31, r0
 8f0:	b1 1d       	adc	r27, r1
 8f2:	aa 1f       	adc	r26, r26
 8f4:	64 9f       	mul	r22, r20
 8f6:	66 27       	eor	r22, r22
 8f8:	b0 0d       	add	r27, r0
 8fa:	a1 1d       	adc	r26, r1
 8fc:	66 1f       	adc	r22, r22
 8fe:	82 9f       	mul	r24, r18
 900:	22 27       	eor	r18, r18
 902:	b0 0d       	add	r27, r0
 904:	a1 1d       	adc	r26, r1
 906:	62 1f       	adc	r22, r18
 908:	73 9f       	mul	r23, r19
 90a:	b0 0d       	add	r27, r0
 90c:	a1 1d       	adc	r26, r1
 90e:	62 1f       	adc	r22, r18
 910:	83 9f       	mul	r24, r19
 912:	a0 0d       	add	r26, r0
 914:	61 1d       	adc	r22, r1
 916:	22 1f       	adc	r18, r18
 918:	74 9f       	mul	r23, r20
 91a:	33 27       	eor	r19, r19
 91c:	a0 0d       	add	r26, r0
 91e:	61 1d       	adc	r22, r1
 920:	23 1f       	adc	r18, r19
 922:	84 9f       	mul	r24, r20
 924:	60 0d       	add	r22, r0
 926:	21 1d       	adc	r18, r1
 928:	82 2f       	mov	r24, r18
 92a:	76 2f       	mov	r23, r22
 92c:	6a 2f       	mov	r22, r26
 92e:	11 24       	eor	r1, r1
 930:	9f 57       	subi	r25, 0x7F	; 127
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	8a f0       	brmi	.+34     	; 0x958 <__mulsf3_pse+0x84>
 936:	e1 f0       	breq	.+56     	; 0x970 <__mulsf3_pse+0x9c>
 938:	88 23       	and	r24, r24
 93a:	4a f0       	brmi	.+18     	; 0x94e <__mulsf3_pse+0x7a>
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	bb 1f       	adc	r27, r27
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	91 50       	subi	r25, 0x01	; 1
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	a9 f7       	brne	.-22     	; 0x938 <__mulsf3_pse+0x64>
 94e:	9e 3f       	cpi	r25, 0xFE	; 254
 950:	51 05       	cpc	r21, r1
 952:	70 f0       	brcs	.+28     	; 0x970 <__mulsf3_pse+0x9c>
 954:	60 cf       	rjmp	.-320    	; 0x816 <__fp_inf>
 956:	aa cf       	rjmp	.-172    	; 0x8ac <__fp_szero>
 958:	5f 3f       	cpi	r21, 0xFF	; 255
 95a:	ec f3       	brlt	.-6      	; 0x956 <__mulsf3_pse+0x82>
 95c:	98 3e       	cpi	r25, 0xE8	; 232
 95e:	dc f3       	brlt	.-10     	; 0x956 <__mulsf3_pse+0x82>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f7 95       	ror	r31
 96a:	e7 95       	ror	r30
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	c1 f7       	brne	.-16     	; 0x960 <__mulsf3_pse+0x8c>
 970:	fe 2b       	or	r31, r30
 972:	88 0f       	add	r24, r24
 974:	91 1d       	adc	r25, r1
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <pow>:
 97e:	fa 01       	movw	r30, r20
 980:	ee 0f       	add	r30, r30
 982:	ff 1f       	adc	r31, r31
 984:	30 96       	adiw	r30, 0x00	; 0
 986:	21 05       	cpc	r18, r1
 988:	31 05       	cpc	r19, r1
 98a:	99 f1       	breq	.+102    	; 0x9f2 <pow+0x74>
 98c:	61 15       	cp	r22, r1
 98e:	71 05       	cpc	r23, r1
 990:	61 f4       	brne	.+24     	; 0x9aa <pow+0x2c>
 992:	80 38       	cpi	r24, 0x80	; 128
 994:	bf e3       	ldi	r27, 0x3F	; 63
 996:	9b 07       	cpc	r25, r27
 998:	49 f1       	breq	.+82     	; 0x9ec <pow+0x6e>
 99a:	68 94       	set
 99c:	90 38       	cpi	r25, 0x80	; 128
 99e:	81 05       	cpc	r24, r1
 9a0:	61 f0       	breq	.+24     	; 0x9ba <pow+0x3c>
 9a2:	80 38       	cpi	r24, 0x80	; 128
 9a4:	bf ef       	ldi	r27, 0xFF	; 255
 9a6:	9b 07       	cpc	r25, r27
 9a8:	41 f0       	breq	.+16     	; 0x9ba <pow+0x3c>
 9aa:	99 23       	and	r25, r25
 9ac:	42 f5       	brpl	.+80     	; 0x9fe <pow+0x80>
 9ae:	ff 3f       	cpi	r31, 0xFF	; 255
 9b0:	e1 05       	cpc	r30, r1
 9b2:	31 05       	cpc	r19, r1
 9b4:	21 05       	cpc	r18, r1
 9b6:	11 f1       	breq	.+68     	; 0x9fc <pow+0x7e>
 9b8:	e8 94       	clt
 9ba:	08 94       	sec
 9bc:	e7 95       	ror	r30
 9be:	d9 01       	movw	r26, r18
 9c0:	aa 23       	and	r26, r26
 9c2:	29 f4       	brne	.+10     	; 0x9ce <pow+0x50>
 9c4:	ab 2f       	mov	r26, r27
 9c6:	be 2f       	mov	r27, r30
 9c8:	f8 5f       	subi	r31, 0xF8	; 248
 9ca:	d0 f3       	brcs	.-12     	; 0x9c0 <pow+0x42>
 9cc:	10 c0       	rjmp	.+32     	; 0x9ee <pow+0x70>
 9ce:	ff 5f       	subi	r31, 0xFF	; 255
 9d0:	70 f4       	brcc	.+28     	; 0x9ee <pow+0x70>
 9d2:	a6 95       	lsr	r26
 9d4:	e0 f7       	brcc	.-8      	; 0x9ce <pow+0x50>
 9d6:	f7 39       	cpi	r31, 0x97	; 151
 9d8:	50 f0       	brcs	.+20     	; 0x9ee <pow+0x70>
 9da:	19 f0       	breq	.+6      	; 0x9e2 <pow+0x64>
 9dc:	ff 3a       	cpi	r31, 0xAF	; 175
 9de:	38 f4       	brcc	.+14     	; 0x9ee <pow+0x70>
 9e0:	9f 77       	andi	r25, 0x7F	; 127
 9e2:	9f 93       	push	r25
 9e4:	0c d0       	rcall	.+24     	; 0x9fe <pow+0x80>
 9e6:	0f 90       	pop	r0
 9e8:	07 fc       	sbrc	r0, 7
 9ea:	90 58       	subi	r25, 0x80	; 128
 9ec:	08 95       	ret
 9ee:	3e f0       	brts	.+14     	; 0x9fe <pow+0x80>
 9f0:	18 cf       	rjmp	.-464    	; 0x822 <__fp_nan>
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	80 e8       	ldi	r24, 0x80	; 128
 9f8:	9f e3       	ldi	r25, 0x3F	; 63
 9fa:	08 95       	ret
 9fc:	4f e7       	ldi	r20, 0x7F	; 127
 9fe:	9f 77       	andi	r25, 0x7F	; 127
 a00:	5f 93       	push	r21
 a02:	4f 93       	push	r20
 a04:	3f 93       	push	r19
 a06:	2f 93       	push	r18
 a08:	9e d0       	rcall	.+316    	; 0xb46 <log>
 a0a:	2f 91       	pop	r18
 a0c:	3f 91       	pop	r19
 a0e:	4f 91       	pop	r20
 a10:	5f 91       	pop	r21
 a12:	52 df       	rcall	.-348    	; 0x8b8 <__mulsf3>
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <exp>
 a16:	19 f4       	brne	.+6      	; 0xa1e <pow+0xa0>
 a18:	0e f0       	brts	.+2      	; 0xa1c <pow+0x9e>
 a1a:	fd ce       	rjmp	.-518    	; 0x816 <__fp_inf>
 a1c:	46 cf       	rjmp	.-372    	; 0x8aa <__fp_zero>
 a1e:	01 cf       	rjmp	.-510    	; 0x822 <__fp_nan>

00000a20 <exp>:
 a20:	2a df       	rcall	.-428    	; 0x876 <__fp_splitA>
 a22:	c8 f3       	brcs	.-14     	; 0xa16 <pow+0x98>
 a24:	96 38       	cpi	r25, 0x86	; 134
 a26:	c0 f7       	brcc	.-16     	; 0xa18 <pow+0x9a>
 a28:	07 f8       	bld	r0, 7
 a2a:	0f 92       	push	r0
 a2c:	e8 94       	clt
 a2e:	2b e3       	ldi	r18, 0x3B	; 59
 a30:	3a ea       	ldi	r19, 0xAA	; 170
 a32:	48 eb       	ldi	r20, 0xB8	; 184
 a34:	5f e7       	ldi	r21, 0x7F	; 127
 a36:	4e df       	rcall	.-356    	; 0x8d4 <__mulsf3_pse>
 a38:	0f 92       	push	r0
 a3a:	0f 92       	push	r0
 a3c:	0f 92       	push	r0
 a3e:	4d b7       	in	r20, 0x3d	; 61
 a40:	5e b7       	in	r21, 0x3e	; 62
 a42:	0f 92       	push	r0
 a44:	c0 d0       	rcall	.+384    	; 0xbc6 <modf>
 a46:	e4 e5       	ldi	r30, 0x54	; 84
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	16 d0       	rcall	.+44     	; 0xa78 <__fp_powser>
 a4c:	4f 91       	pop	r20
 a4e:	5f 91       	pop	r21
 a50:	ef 91       	pop	r30
 a52:	ff 91       	pop	r31
 a54:	e5 95       	asr	r30
 a56:	ee 1f       	adc	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	49 f0       	breq	.+18     	; 0xa6e <exp+0x4e>
 a5c:	fe 57       	subi	r31, 0x7E	; 126
 a5e:	e0 68       	ori	r30, 0x80	; 128
 a60:	44 27       	eor	r20, r20
 a62:	ee 0f       	add	r30, r30
 a64:	44 1f       	adc	r20, r20
 a66:	fa 95       	dec	r31
 a68:	e1 f7       	brne	.-8      	; 0xa62 <exp+0x42>
 a6a:	41 95       	neg	r20
 a6c:	55 0b       	sbc	r21, r21
 a6e:	32 d0       	rcall	.+100    	; 0xad4 <ldexp>
 a70:	0f 90       	pop	r0
 a72:	07 fe       	sbrs	r0, 7
 a74:	26 c0       	rjmp	.+76     	; 0xac2 <inverse>
 a76:	08 95       	ret

00000a78 <__fp_powser>:
 a78:	df 93       	push	r29
 a7a:	cf 93       	push	r28
 a7c:	1f 93       	push	r17
 a7e:	0f 93       	push	r16
 a80:	ff 92       	push	r15
 a82:	ef 92       	push	r14
 a84:	df 92       	push	r13
 a86:	7b 01       	movw	r14, r22
 a88:	8c 01       	movw	r16, r24
 a8a:	68 94       	set
 a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__fp_powser+0x20>
 a8e:	da 2e       	mov	r13, r26
 a90:	ef 01       	movw	r28, r30
 a92:	1e df       	rcall	.-452    	; 0x8d0 <__mulsf3x>
 a94:	fe 01       	movw	r30, r28
 a96:	e8 94       	clt
 a98:	a5 91       	lpm	r26, Z+
 a9a:	25 91       	lpm	r18, Z+
 a9c:	35 91       	lpm	r19, Z+
 a9e:	45 91       	lpm	r20, Z+
 aa0:	55 91       	lpm	r21, Z+
 aa2:	ae f3       	brts	.-22     	; 0xa8e <__fp_powser+0x16>
 aa4:	ef 01       	movw	r28, r30
 aa6:	8e dd       	rcall	.-1252   	; 0x5c4 <__addsf3x>
 aa8:	fe 01       	movw	r30, r28
 aaa:	97 01       	movw	r18, r14
 aac:	a8 01       	movw	r20, r16
 aae:	da 94       	dec	r13
 ab0:	79 f7       	brne	.-34     	; 0xa90 <__fp_powser+0x18>
 ab2:	df 90       	pop	r13
 ab4:	ef 90       	pop	r14
 ab6:	ff 90       	pop	r15
 ab8:	0f 91       	pop	r16
 aba:	1f 91       	pop	r17
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	08 95       	ret

00000ac2 <inverse>:
 ac2:	9b 01       	movw	r18, r22
 ac4:	ac 01       	movw	r20, r24
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	80 e8       	ldi	r24, 0x80	; 128
 acc:	9f e3       	ldi	r25, 0x3F	; 63
 ace:	cd cd       	rjmp	.-1126   	; 0x66a <__divsf3>
 ad0:	a2 ce       	rjmp	.-700    	; 0x816 <__fp_inf>
 ad2:	ac c0       	rjmp	.+344    	; 0xc2c <__fp_mpack>

00000ad4 <ldexp>:
 ad4:	d0 de       	rcall	.-608    	; 0x876 <__fp_splitA>
 ad6:	e8 f3       	brcs	.-6      	; 0xad2 <inverse+0x10>
 ad8:	99 23       	and	r25, r25
 ada:	d9 f3       	breq	.-10     	; 0xad2 <inverse+0x10>
 adc:	94 0f       	add	r25, r20
 ade:	51 1d       	adc	r21, r1
 ae0:	bb f3       	brvs	.-18     	; 0xad0 <inverse+0xe>
 ae2:	91 50       	subi	r25, 0x01	; 1
 ae4:	50 40       	sbci	r21, 0x00	; 0
 ae6:	94 f0       	brlt	.+36     	; 0xb0c <ldexp+0x38>
 ae8:	59 f0       	breq	.+22     	; 0xb00 <ldexp+0x2c>
 aea:	88 23       	and	r24, r24
 aec:	32 f0       	brmi	.+12     	; 0xafa <ldexp+0x26>
 aee:	66 0f       	add	r22, r22
 af0:	77 1f       	adc	r23, r23
 af2:	88 1f       	adc	r24, r24
 af4:	91 50       	subi	r25, 0x01	; 1
 af6:	50 40       	sbci	r21, 0x00	; 0
 af8:	c1 f7       	brne	.-16     	; 0xaea <ldexp+0x16>
 afa:	9e 3f       	cpi	r25, 0xFE	; 254
 afc:	51 05       	cpc	r21, r1
 afe:	44 f7       	brge	.-48     	; 0xad0 <inverse+0xe>
 b00:	88 0f       	add	r24, r24
 b02:	91 1d       	adc	r25, r1
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	ac f0       	brlt	.+42     	; 0xb3a <ldexp+0x66>
 b10:	98 3e       	cpi	r25, 0xE8	; 232
 b12:	9c f0       	brlt	.+38     	; 0xb3a <ldexp+0x66>
 b14:	bb 27       	eor	r27, r27
 b16:	86 95       	lsr	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	b7 95       	ror	r27
 b1e:	08 f4       	brcc	.+2      	; 0xb22 <ldexp+0x4e>
 b20:	b1 60       	ori	r27, 0x01	; 1
 b22:	93 95       	inc	r25
 b24:	c1 f7       	brne	.-16     	; 0xb16 <ldexp+0x42>
 b26:	bb 0f       	add	r27, r27
 b28:	58 f7       	brcc	.-42     	; 0xb00 <ldexp+0x2c>
 b2a:	11 f4       	brne	.+4      	; 0xb30 <ldexp+0x5c>
 b2c:	60 ff       	sbrs	r22, 0
 b2e:	e8 cf       	rjmp	.-48     	; 0xb00 <ldexp+0x2c>
 b30:	6f 5f       	subi	r22, 0xFF	; 255
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	e3 cf       	rjmp	.-58     	; 0xb00 <ldexp+0x2c>
 b3a:	b8 ce       	rjmp	.-656    	; 0x8ac <__fp_szero>
 b3c:	0e f0       	brts	.+2      	; 0xb40 <ldexp+0x6c>
 b3e:	76 c0       	rjmp	.+236    	; 0xc2c <__fp_mpack>
 b40:	70 ce       	rjmp	.-800    	; 0x822 <__fp_nan>
 b42:	68 94       	set
 b44:	68 ce       	rjmp	.-816    	; 0x816 <__fp_inf>

00000b46 <log>:
 b46:	97 de       	rcall	.-722    	; 0x876 <__fp_splitA>
 b48:	c8 f3       	brcs	.-14     	; 0xb3c <ldexp+0x68>
 b4a:	99 23       	and	r25, r25
 b4c:	d1 f3       	breq	.-12     	; 0xb42 <ldexp+0x6e>
 b4e:	c6 f3       	brts	.-16     	; 0xb40 <ldexp+0x6c>
 b50:	df 93       	push	r29
 b52:	cf 93       	push	r28
 b54:	1f 93       	push	r17
 b56:	0f 93       	push	r16
 b58:	ff 92       	push	r15
 b5a:	c9 2f       	mov	r28, r25
 b5c:	dd 27       	eor	r29, r29
 b5e:	88 23       	and	r24, r24
 b60:	2a f0       	brmi	.+10     	; 0xb6c <log+0x26>
 b62:	21 97       	sbiw	r28, 0x01	; 1
 b64:	66 0f       	add	r22, r22
 b66:	77 1f       	adc	r23, r23
 b68:	88 1f       	adc	r24, r24
 b6a:	da f7       	brpl	.-10     	; 0xb62 <log+0x1c>
 b6c:	20 e0       	ldi	r18, 0x00	; 0
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	40 e8       	ldi	r20, 0x80	; 128
 b72:	5f eb       	ldi	r21, 0xBF	; 191
 b74:	9f e3       	ldi	r25, 0x3F	; 63
 b76:	88 39       	cpi	r24, 0x98	; 152
 b78:	20 f0       	brcs	.+8      	; 0xb82 <log+0x3c>
 b7a:	80 3e       	cpi	r24, 0xE0	; 224
 b7c:	30 f0       	brcs	.+12     	; 0xb8a <log+0x44>
 b7e:	21 96       	adiw	r28, 0x01	; 1
 b80:	8f 77       	andi	r24, 0x7F	; 127
 b82:	0f dd       	rcall	.-1506   	; 0x5a2 <__addsf3>
 b84:	ec e7       	ldi	r30, 0x7C	; 124
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <log+0x4a>
 b8a:	0b dd       	rcall	.-1514   	; 0x5a2 <__addsf3>
 b8c:	e9 ea       	ldi	r30, 0xA9	; 169
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	73 df       	rcall	.-282    	; 0xa78 <__fp_powser>
 b92:	8b 01       	movw	r16, r22
 b94:	be 01       	movw	r22, r28
 b96:	ec 01       	movw	r28, r24
 b98:	fb 2e       	mov	r15, r27
 b9a:	6f 57       	subi	r22, 0x7F	; 127
 b9c:	71 09       	sbc	r23, r1
 b9e:	75 95       	asr	r23
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 0b       	sbc	r24, r24
 ba4:	99 0b       	sbc	r25, r25
 ba6:	fc dd       	rcall	.-1032   	; 0x7a0 <__floatsisf>
 ba8:	28 e1       	ldi	r18, 0x18	; 24
 baa:	32 e7       	ldi	r19, 0x72	; 114
 bac:	41 e3       	ldi	r20, 0x31	; 49
 bae:	5f e3       	ldi	r21, 0x3F	; 63
 bb0:	8f de       	rcall	.-738    	; 0x8d0 <__mulsf3x>
 bb2:	af 2d       	mov	r26, r15
 bb4:	98 01       	movw	r18, r16
 bb6:	ae 01       	movw	r20, r28
 bb8:	ff 90       	pop	r15
 bba:	0f 91       	pop	r16
 bbc:	1f 91       	pop	r17
 bbe:	cf 91       	pop	r28
 bc0:	df 91       	pop	r29
 bc2:	00 dd       	rcall	.-1536   	; 0x5c4 <__addsf3x>
 bc4:	3f ce       	rjmp	.-898    	; 0x844 <__fp_round>

00000bc6 <modf>:
 bc6:	fa 01       	movw	r30, r20
 bc8:	dc 01       	movw	r26, r24
 bca:	aa 0f       	add	r26, r26
 bcc:	bb 1f       	adc	r27, r27
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	bf 57       	subi	r27, 0x7F	; 127
 bd4:	28 f4       	brcc	.+10     	; 0xbe0 <modf+0x1a>
 bd6:	22 27       	eor	r18, r18
 bd8:	33 27       	eor	r19, r19
 bda:	44 27       	eor	r20, r20
 bdc:	50 78       	andi	r21, 0x80	; 128
 bde:	1f c0       	rjmp	.+62     	; 0xc1e <modf+0x58>
 be0:	b7 51       	subi	r27, 0x17	; 23
 be2:	88 f4       	brcc	.+34     	; 0xc06 <modf+0x40>
 be4:	ab 2f       	mov	r26, r27
 be6:	00 24       	eor	r0, r0
 be8:	46 95       	lsr	r20
 bea:	37 95       	ror	r19
 bec:	27 95       	ror	r18
 bee:	01 1c       	adc	r0, r1
 bf0:	a3 95       	inc	r26
 bf2:	d2 f3       	brmi	.-12     	; 0xbe8 <modf+0x22>
 bf4:	00 20       	and	r0, r0
 bf6:	69 f0       	breq	.+26     	; 0xc12 <modf+0x4c>
 bf8:	22 0f       	add	r18, r18
 bfa:	33 1f       	adc	r19, r19
 bfc:	44 1f       	adc	r20, r20
 bfe:	b3 95       	inc	r27
 c00:	da f3       	brmi	.-10     	; 0xbf8 <modf+0x32>
 c02:	0d d0       	rcall	.+26     	; 0xc1e <modf+0x58>
 c04:	cd cc       	rjmp	.-1638   	; 0x5a0 <__subsf3>
 c06:	61 30       	cpi	r22, 0x01	; 1
 c08:	71 05       	cpc	r23, r1
 c0a:	a0 e8       	ldi	r26, 0x80	; 128
 c0c:	8a 07       	cpc	r24, r26
 c0e:	b9 46       	sbci	r27, 0x69	; 105
 c10:	30 f4       	brcc	.+12     	; 0xc1e <modf+0x58>
 c12:	9b 01       	movw	r18, r22
 c14:	ac 01       	movw	r20, r24
 c16:	66 27       	eor	r22, r22
 c18:	77 27       	eor	r23, r23
 c1a:	88 27       	eor	r24, r24
 c1c:	90 78       	andi	r25, 0x80	; 128
 c1e:	30 96       	adiw	r30, 0x00	; 0
 c20:	21 f0       	breq	.+8      	; 0xc2a <modf+0x64>
 c22:	20 83       	st	Z, r18
 c24:	31 83       	std	Z+1, r19	; 0x01
 c26:	42 83       	std	Z+2, r20	; 0x02
 c28:	53 83       	std	Z+3, r21	; 0x03
 c2a:	08 95       	ret

00000c2c <__fp_mpack>:
 c2c:	9f 3f       	cpi	r25, 0xFF	; 255
 c2e:	31 f0       	breq	.+12     	; 0xc3c <__fp_mpack_finite+0xc>

00000c30 <__fp_mpack_finite>:
 c30:	91 50       	subi	r25, 0x01	; 1
 c32:	20 f4       	brcc	.+8      	; 0xc3c <__fp_mpack_finite+0xc>
 c34:	87 95       	ror	r24
 c36:	77 95       	ror	r23
 c38:	67 95       	ror	r22
 c3a:	b7 95       	ror	r27
 c3c:	88 0f       	add	r24, r24
 c3e:	91 1d       	adc	r25, r1
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
